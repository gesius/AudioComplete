\#!/bin/bash

# package

# This will collect up the x86 and x86_64 bundles created by build
# and package them together with an installer script.

STRIP=1
BUILDTYPE=""
SINGLE_ARCH="F"
X86_BUNDLE_OK="F"
X86_64_BUNDLE_OK="F"


if [ $# -eq 0 ] ; then
	echo ""	 
	echo "ERROR - Please specify build type"
	echo "	  --public"
	echo "	  --sae"
	echo ""	 
	exit 1
fi

while [ $# -gt 0 ] ; do
	echo "arg = $1"
	case $1 in

	#
	# top level build targets
	#

	--sae)
		APPNAME=Ardour ;
		shift ;;
	--mixbus)
		APPNAME=Mixbus ;
		shift ;;
	--public)
		APPNAME=Ardour ;
		shift ;;

	--nostrip) STRIP= ; shift ;;
	--singlearch) SINGLE_ARCH="T" ; shift ;;

	*)
		#catch all for unknown arguments
		echo ""
		echo "!!! ERROR !!! - Unknown argument $1"
		echo ""
		exit 1
		;;
	esac
done

release_version=`grep -m 1 '^VERSION' ../../wscript | awk '{print $3}' | sed "s/'//g"`
svn_version=`grep -m 1 'svn_revision =' ../../libs/ardour/svn_revision.cc | cut -d"'" -f 2`

# Figure out the Build Type
if grep -q "DEBUG = True" ../../build/c4che/default.cache.py; then
	DEBUG="T"
else
	DEBUG="F"
fi

if [ x$DEBUG != x ]; then
	if [ x$STRIP != x ]; then
		BUILDTYPE="strip"
	else
		BUILDTYPE="dbg"
	fi
fi


if [ -z ${BUILDTYPE} ]; then
	X86_BUILD="${APPNAME}_x86-${release_version}_${svn_version}.tar.bz2"
	X86_64_BUILD="${APPNAME}_x86_64-${release_version}_${svn_version}.tar.bz2"
else
	X86_BUILD="${APPNAME}_x86-${release_version}_${svn_version}-${BUILDTYPE}.tar.bz2"
	X86_64_BUILD="${APPNAME}_x86_64-${release_version}_${svn_version}-${BUILDTYPE}.tar.bz2"
fi 


if [ ! -e ${X86_BUILD} ]; then
	echo ""
	echo "Can't locate x86 bundle file ${X86_BUILD}"
	echo ""
else
	X86_BUNDLE_OK="T"
fi

if [ ! -e ${X86_64_BUILD} ]; then
	echo ""
	echo "Can't locate x86_64 bundle file ${X86_64_BUILD}"
	echo ""
else
	X86_64_BUNDLE_OK="T"
fi


if [ "${X86_BUNDLE_OK}" = "F" ] || [ "${X86_64_BUNDLE_OK}" = "F" ]; then
	if [ "${X86_BUNDLE_OK}" = "${X86_64_BUNDLE_OK}" ]; then
		echo ""
		echo "!!! ERROR !!! - Can't locate bundle files ${X86_BUILD} or ${X86_64_BUILD}"
		echo ""
		exit 1
	elif [ "${SINGLE_ARCH}" = "T" ]; then
		echo ""
		echo "!!! Warning !!! - A single architecture package has been selected"
		echo ""
	else
		echo ""
		echo "!!! ERROR !!! - Missing bundle files."
		echo ""
		exit 1
	fi
fi



if [ -z ${BUILDTYPE} ]; then
	if [ "${SINGLE_ARCH}" = "T" ]; then
		if [ "${X86_BUNDLE_OK}" = "T" ]; then
			PACKAGE="${APPNAME}_32bit-${release_version}_${svn_version}"
		else
			PACKAGE="${APPNAME}_64bit-${release_version}_${svn_version}"
		fi
	else
		PACKAGE="${APPNAME}-${release_version}_${svn_version}"
	fi
else
	if [ "${SINGLE_ARCH}" = "T" ]; then
		if [ "${X86_BUNDLE_OK}" = "T" ]; then
			PACKAGE="${APPNAME}_32bit-${release_version}_${svn_version}-${BUILDTYPE}"
		else
			PACKAGE="${APPNAME}_64bit-${release_version}_${svn_version}-${BUILDTYPE}"
		fi
	else
		PACKAGE="${APPNAME}-${release_version}_${svn_version}-${BUILDTYPE}"
	fi
fi 


echo "Cleaning up any old package files for this build"
#Get rid of any old packages of this same name.
rm -f ${PACKAGE}.tar.bz2
rm -rf ${PACKAGE}


echo "Creating new package dir..."
mkdir ${PACKAGE}

if [ "${X86_BUNDLE_OK}" = "T" ]; then
	mv ${X86_BUILD} ${PACKAGE}
fi

if [ "${X86_64_BUNDLE_OK}" = "T" ]; then
	mv ${X86_64_BUILD} ${PACKAGE}
fi

cp install.sh ${PACKAGE}
cp stage2.run ${PACKAGE}/.stage2.run
cp README ${PACKAGE}

echo "Creating tarball..."
tar -czf ${PACKAGE}.tar.gz ${PACKAGE}

echo "Clean up"
rm -rf ${PACKAGE}

echo ""
echo "Done"
echo ""
