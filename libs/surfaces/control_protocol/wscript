#!/usr/bin/env python
from waflib.extras import autowaf as autowaf
import os

# Library version (UNIX style major, minor, micro)
# major increment <=> incompatible changes
# minor increment <=> compatible changes (additions)
# micro increment <=> no interface changes
APPNAME = 'libardour_cp'
LIBARDOUR_CP_LIB_VERSION = '4.1.0'

# Mandatory variables
top = '.'
out = 'build'

controlcp_sources = [
    'basic_ui.cc',
    'control_protocol.cc',
    ]

def options(opt):
    autowaf.set_options(opt)

def configure(conf):
    autowaf.configure(conf)

def build(bld):
    if bld.is_defined ('INTERNAL_SHARED_LIBS'):
        obj              = bld.shlib(features = 'c cxx cshlib cxxshlib', source=controlcp_sources)
        # defines for this library
        obj.defines      = [ 'LIBCONTROLCP_DLL=1', 'LIBCONTROLCP_DLL_EXPORTS=1' ]
        # internal shared libs that we use
        obj.defines     += [ 'LIBPBD_DLL=1', 'LIBARDOUR_DLL=1', 'LIBEVORAL_DLL=1' ]
        obj.cxxflags     = [ '-fvisibility=hidden' ]
        obj.cflags       = [ '-fvisibility=hidden' ]
    else:
        obj              = bld.stlib(features = 'c cxx cstlib cxxstlib', source=controlcp_sources)
        obj.cxxflags     = [ '-fPIC' ]
        obj.defines      = [ ]

    obj.export_includes = ['.', './control_protocol' ]
    obj.defines    +=  [ 'PACKAGE="ardour_cp"' ]
    obj.includes     = ['.', './control_protocol']
    obj.name         = 'libardour_cp'
    obj.target       = 'ardourcp'
    obj.use          = 'ardour libtimecode'
    obj.vnum         = LIBARDOUR_CP_LIB_VERSION
    obj.install_path = os.path.join(bld.env['LIBDIR'], 'ardour3')

def shutdown():
    autowaf.shutdown()
