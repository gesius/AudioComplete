#!/usr/bin/env python
import autowaf

# Version of this package (even if built as a child)
LIBSURFACES_VERSION = '0.0.0'

# Library version (UNIX style major, minor, micro)
# major increment <=> incompatible changes
# minor increment <=> compatible changes (additions)
# micro increment <=> no interface changes
LIBSURFACES_LIB_VERSION = '4.1.0'

# Variables for 'waf dist'
APPNAME = 'libsurfaces'
VERSION = LIBSURFACES_VERSION

# Mandatory variables
srcdir = '.'
blddir = 'build'

def set_options(opt):
	autowaf.set_options(opt)

def configure(conf):
	autowaf.configure(conf)
	autowaf.check_tool(conf, 'compiler_cxx')
	autowaf.check_pkg(conf, 'glib-2.0', uselib_store='GLIB', atleast_version='2.2')
	autowaf.check_pkg(conf, 'glibmm-2.4', uselib_store='GLIBMM', atleast_version='2.14.0')
	autowaf.check_pkg(conf, 'sigc++-2.0', uselib_store='SIGCPP', atleast_version='2.0')
	autowaf.check_pkg(conf, 'libxml-2.0', uselib_store='XML')
	autowaf.check_pkg(conf, 'uuid', uselib_store='UUID')

	conf.env.append_value('CXXFLAGS', '-DHAVE_WAFCONFIG_H')
	conf.write_config_header('wafconfig.h')

	# Boost headers
	autowaf.check_header(conf, 'boost/shared_ptr.hpp')
	autowaf.check_header(conf, 'boost/weak_ptr.hpp')

def build(bld):
	# Library
	obj = bld.new_task_gen('cxx', 'shlib')
	obj.source = '''
		control_protocol/basic_ui.cc
		control_protocol/control_protocol.cc
		control_protocol/smpte.cc
	'''
	obj.export_incdirs = ['./control_protocol']
	obj.cxxflags     = '-DPACKAGE=\\\"ardour_cp\\\"'
	obj.includes     = ['.', './control_protocol']
	obj.name         = 'libsurfaces'
	obj.target       = 'surfaces'
	obj.uselib_local = 'libardour'
	obj.vnum         = LIBSURFACES_LIB_VERSION
	obj.install_path = ''
	
def shutdown():
	autowaf.shutdown()

