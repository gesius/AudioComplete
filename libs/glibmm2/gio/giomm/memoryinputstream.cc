// Generated by gtkmmproc -- DO NOT MODIFY!


#include <giomm/memoryinputstream.h>
#include <giomm/private/memoryinputstream_p.h>

// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* Copyright (C) 2007 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gio/gio.h>

namespace Gio
{

void MemoryInputStream::add_data(const std::string& data)
{
  g_memory_input_stream_add_data(gobj(), data.c_str(), data.size(), NULL);
}


void MemoryInputStream::add_data(const void* data, gssize len)
{
  g_memory_input_stream_add_data(gobj(), data, len, NULL);
}

} // namespace Gio

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gio::MemoryInputStream> wrap(GMemoryInputStream* object, bool take_copy)
{
  return Glib::RefPtr<Gio::MemoryInputStream>( dynamic_cast<Gio::MemoryInputStream*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gio
{


/* The *_Class implementation: */

const Glib::Class& MemoryInputStream_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &MemoryInputStream_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(g_memory_input_stream_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  Seekable::add_interface(get_type());

  }

  return *this;
}

void MemoryInputStream_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
}

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED


Glib::ObjectBase* MemoryInputStream_Class::wrap_new(GObject* object)
{
  return new MemoryInputStream((GMemoryInputStream*)object);
}


/* The implementation: */

GMemoryInputStream* MemoryInputStream::gobj_copy()
{
  reference();
  return gobj();
}

MemoryInputStream::MemoryInputStream(const Glib::ConstructParams& construct_params)
:
  Gio::InputStream(construct_params)
{

}

MemoryInputStream::MemoryInputStream(GMemoryInputStream* castitem)
:
  Gio::InputStream((GInputStream*)(castitem))
{}


MemoryInputStream::~MemoryInputStream()
{}


MemoryInputStream::CppClassType MemoryInputStream::memoryinputstream_class_; // initialize static member

GType MemoryInputStream::get_type()
{
  return memoryinputstream_class_.init().get_type();
}

GType MemoryInputStream::get_base_type()
{
  return g_memory_input_stream_get_type();
}


MemoryInputStream::MemoryInputStream()
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Gio::InputStream(Glib::ConstructParams(memoryinputstream_class_.init()))
{
  

}

Glib::RefPtr<MemoryInputStream> MemoryInputStream::create()
{
  return Glib::RefPtr<MemoryInputStream>( new MemoryInputStream() );
}


#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED


} // namespace Gio


