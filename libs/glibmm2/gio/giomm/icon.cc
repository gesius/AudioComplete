// Generated by gtkmmproc -- DO NOT MODIFY!


#include <giomm/icon.h>
#include <giomm/private/icon_p.h>

// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* Copyright (C) 2007 The giomm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gio/gio.h>

namespace Gio {

bool
Icon::equal(const Glib::RefPtr<Icon>& other) const
{
  return static_cast<bool>(
    g_icon_equal(const_cast<GIcon*>(this->gobj()),
                 const_cast<GIcon*>(other->gobj())));
}

} // namespace Gio

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gio::Icon> wrap(GIcon* object, bool take_copy)
{
  return Glib::RefPtr<Gio::Icon>( dynamic_cast<Gio::Icon*> (Glib::wrap_auto_interface<Gio::Icon> ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} // namespace Glib


namespace Gio
{


/* The *_Class implementation: */

const Glib::Interface_Class& Icon_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Interface_Class has to know the interface init function
    // in order to add interfaces to implementing types.
    class_init_func_ = &Icon_Class::iface_init_function;

    // We can not derive from another interface, and it is not necessary anyway.
    gtype_ = g_icon_get_type();
  }

  return *this;
}

void Icon_Class::iface_init_function(void* g_iface, void*)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_iface);

  //This is just to avoid an "unused variable" warning when there are no vfuncs or signal handlers to connect.
  //This is a temporary fix until I find out why I can not seem to derive a GtkFileChooser interface. murrayc
  g_assert(klass != 0); 

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
}

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED


Glib::ObjectBase* Icon_Class::wrap_new(GObject* object)
{
  return new Icon((GIcon*)(object));
}


/* The implementation: */

Icon::Icon()
:
  Glib::Interface(icon_class_.init())
{}

Icon::Icon(GIcon* castitem)
:
  Glib::Interface((GObject*)(castitem))
{}

Icon::Icon(const Glib::Interface_Class& interface_class)
: Glib::Interface(interface_class)
{
}

Icon::~Icon()
{}

// static
void Icon::add_interface(GType gtype_implementer)
{
  icon_class_.init().add_interface(gtype_implementer);
}

Icon::CppClassType Icon::icon_class_; // initialize static member

GType Icon::get_type()
{
  return icon_class_.init().get_type();
}

GType Icon::get_base_type()
{
  return g_icon_get_type();
}


guint Icon::hash() const
{
  return g_icon_hash(const_cast<GIcon*>(gobj()));
}


#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED


} // namespace Gio


