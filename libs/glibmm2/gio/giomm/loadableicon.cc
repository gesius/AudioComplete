// Generated by gtkmmproc -- DO NOT MODIFY!


#include <giomm/loadableicon.h>
#include <giomm/private/loadableicon_p.h>

// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* Copyright (C) 2007 The giomm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gio/gio.h>
#include <giomm/private/icon_p.h>
#include "slot_async.h"

namespace Gio
{

#ifdef GLIBMM_EXCEPTIONS_ENABLED
Glib::RefPtr<InputStream>
LoadableIcon::load(int size, Glib::ustring& type, const Glib::RefPtr<Cancellable>& cancellable)
#else
Glib::RefPtr<InputStream>
LoadableIcon::load(int size, Glib::ustring& type, const Glib::RefPtr<Cancellable>& cancellable, std::auto_ptr<Glib::Error>& error)
#endif //GLIBMM_EXCEPTIONS_ENABLED
{
  char* c_type;
  GError* gerror = 0;
  Glib::RefPtr<InputStream> retval =
      Glib::wrap(g_loadable_icon_load(gobj(),
                 size,
                 &c_type,
                 cancellable->gobj(),
                 &gerror));
#ifdef GLIBMM_EXCEPTIONS_ENABLED
  if(gerror)
    ::Glib::Error::throw_exception(gerror);
#else
  if(gerror)
    error = ::Glib::Error::throw_exception(gerror);
#endif //GLIBMM_EXCEPTIONS_ENABLED

  type = c_type;
  g_free(c_type);
  if(retval)
    retval->reference(); //The function does not do a ref for us.
  return retval;
}

#ifdef GLIBMM_EXCEPTIONS_ENABLED
Glib::RefPtr<InputStream>
LoadableIcon::load(int size, Glib::ustring& type)
#else
Glib::RefPtr<InputStream>
LoadableIcon::load(int size, Glib::ustring& type, std::auto_ptr<Glib::Error>& error)
#endif //GLIBMM_EXCEPTIONS_ENABLED
{
  char* c_type;
  GError* gerror = 0;
  Glib::RefPtr<InputStream> retval =
      Glib::wrap(g_loadable_icon_load(gobj(),
                 size,
                 &c_type,
                 NULL,
                 &gerror));
#ifdef GLIBMM_EXCEPTIONS_ENABLED
  if(gerror)
    ::Glib::Error::throw_exception(gerror);
#else
  if(gerror)
    error = ::Glib::Error::throw_exception(gerror);
#endif //GLIBMM_EXCEPTIONS_ENABLED

  type = c_type;
  g_free(c_type);
  if(retval)
    retval->reference(); //The function does not do a ref for us.
  return retval;
}

void
LoadableIcon::load_async(int size, const SlotAsyncReady& slot, const
                         Glib::RefPtr<Cancellable>& cancellable)
{
  // Create a copy of the slot.
  // A pointer to it will be passed through the callback's data parameter
  // and deleted in the callback.
  SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);

  g_loadable_icon_load_async(gobj(),
                             size,
                             cancellable->gobj(),
                             &SignalProxy_async_callback,
                             slot_copy);
}

void
LoadableIcon::load_async(int size, const SlotAsyncReady& slot)
{
  // Create a copy of the slot.
  // A pointer to it will be passed through the callback's data parameter
  // and deleted in the callback.
  SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);

  g_loadable_icon_load_async(gobj(),
                             size,
                             NULL,
                             &SignalProxy_async_callback,
                             slot_copy);
}

} // namespace Gio

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gio::LoadableIcon> wrap(GLoadableIcon* object, bool take_copy)
{
  return Glib::RefPtr<Gio::LoadableIcon>( dynamic_cast<Gio::LoadableIcon*> (Glib::wrap_auto_interface<Gio::LoadableIcon> ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} // namespace Glib


namespace Gio
{


/* The *_Class implementation: */

const Glib::Interface_Class& LoadableIcon_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Interface_Class has to know the interface init function
    // in order to add interfaces to implementing types.
    class_init_func_ = &LoadableIcon_Class::iface_init_function;

    // We can not derive from another interface, and it is not necessary anyway.
    gtype_ = g_loadable_icon_get_type();
  }

  return *this;
}

void LoadableIcon_Class::iface_init_function(void* g_iface, void*)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_iface);

  //This is just to avoid an "unused variable" warning when there are no vfuncs or signal handlers to connect.
  //This is a temporary fix until I find out why I can not seem to derive a GtkFileChooser interface. murrayc
  g_assert(klass != 0); 

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
}

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED


Glib::ObjectBase* LoadableIcon_Class::wrap_new(GObject* object)
{
  return new LoadableIcon((GLoadableIcon*)(object));
}


/* The implementation: */

LoadableIcon::LoadableIcon()
:
  Icon(loadableicon_class_.init())
{}

LoadableIcon::LoadableIcon(GLoadableIcon* castitem)
:
  Icon((GIcon*)(castitem))
{}

LoadableIcon::LoadableIcon(const Glib::Interface_Class& interface_class)
: Icon(interface_class)
{
}

LoadableIcon::~LoadableIcon()
{}

// static
void LoadableIcon::add_interface(GType gtype_implementer)
{
  loadableicon_class_.init().add_interface(gtype_implementer);
}

LoadableIcon::CppClassType LoadableIcon::loadableicon_class_; // initialize static member

GType LoadableIcon::get_type()
{
  return loadableicon_class_.init().get_type();
}

GType LoadableIcon::get_base_type()
{
  return g_loadable_icon_get_type();
}


#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED


} // namespace Gio


