// Generated by gtkmmproc -- DO NOT MODIFY!


#include <giomm/filemonitor.h>
#include <giomm/private/filemonitor_p.h>

// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* Copyright (C) 2007 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <giomm/file.h>
#include <gio/gio.h>

namespace Gio {


} // namespace Gio

namespace
{


static void FileMonitor_signal_changed_callback(GFileMonitor* self, GFile* p0,GFile* p1,GFileMonitorEvent p2,void* data)
{
  using namespace Gio;
  typedef sigc::slot< void,const Glib::RefPtr<File>&,const Glib::RefPtr<File>&,FileMonitorEvent > SlotType;

  // Do not try to call a signal on a disassociated wrapper.
  if(Glib::ObjectBase::_get_current_wrapper((GObject*) self))
  {
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    try
    {
    #endif //GLIBMM_EXCEPTIONS_ENABLED
      if(sigc::slot_base *const slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))(Glib::wrap(p0, true)
, Glib::wrap(p1, true)
, ((FileMonitorEvent)(p2))
);
    #ifdef GLIBMM_EXCEPTIONS_ENABLED
    }
    catch(...)
    {
      Glib::exception_handlers_invoke();
    }
    #endif //GLIBMM_EXCEPTIONS_ENABLED
  }
}

static const Glib::SignalProxyInfo FileMonitor_signal_changed_info =
{
  "changed",
  (GCallback) &FileMonitor_signal_changed_callback,
  (GCallback) &FileMonitor_signal_changed_callback
};


} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gio::FileMonitor> wrap(GFileMonitor* object, bool take_copy)
{
  return Glib::RefPtr<Gio::FileMonitor>( dynamic_cast<Gio::FileMonitor*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gio
{


/* The *_Class implementation: */

const Glib::Class& FileMonitor_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &FileMonitor_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(g_file_monitor_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}

void FileMonitor_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
  klass->changed = &changed_callback;
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
}

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
void FileMonitor_Class::changed_callback(GFileMonitor* self, GFile* p0, GFile* p1, GFileMonitorEvent p2)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
      #endif //GLIBMM_EXCEPTIONS_ENABLED
        // Call the virtual member method, which derived classes might override.
        obj->on_changed(Glib::wrap(p0, true)
, Glib::wrap(p1, true)
, ((FileMonitorEvent)(p2))
);
        return;
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
      #endif //GLIBMM_EXCEPTIONS_ENABLED
    }
  }
  
  BaseClassType *const base = static_cast<BaseClassType*>(
        g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
    );

  // Call the original underlying C function:
  if(base && base->changed)
    (*base->changed)(self, p0, p1, p2);
}
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED


Glib::ObjectBase* FileMonitor_Class::wrap_new(GObject* object)
{
  return new FileMonitor((GFileMonitor*)object);
}


/* The implementation: */

GFileMonitor* FileMonitor::gobj_copy()
{
  reference();
  return gobj();
}

FileMonitor::FileMonitor(const Glib::ConstructParams& construct_params)
:
  Glib::Object(construct_params)
{

}

FileMonitor::FileMonitor(GFileMonitor* castitem)
:
  Glib::Object((GObject*)(castitem))
{}


FileMonitor::~FileMonitor()
{}


FileMonitor::CppClassType FileMonitor::filemonitor_class_; // initialize static member

GType FileMonitor::get_type()
{
  return filemonitor_class_.init().get_type();
}

GType FileMonitor::get_base_type()
{
  return g_file_monitor_get_type();
}


bool FileMonitor::cancel()
{
  return g_file_monitor_cancel(gobj());
}

bool FileMonitor::is_cancelled() const
{
  return g_file_monitor_is_cancelled(const_cast<GFileMonitor*>(gobj()));
}

void FileMonitor::set_rate_limit(int limit_msecs)
{
g_file_monitor_set_rate_limit(gobj(), limit_msecs); 
}


Glib::SignalProxy3< void,const Glib::RefPtr<File>&,const Glib::RefPtr<File>&,FileMonitorEvent > FileMonitor::signal_changed()
{
  return Glib::SignalProxy3< void,const Glib::RefPtr<File>&,const Glib::RefPtr<File>&,FileMonitorEvent >(this, &FileMonitor_signal_changed_info);
}


#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy<int> FileMonitor::property_rate_limit() 
{
  return Glib::PropertyProxy<int>(this, "rate-limit");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<int> FileMonitor::property_rate_limit() const
{
  return Glib::PropertyProxy_ReadOnly<int>(this, "rate-limit");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<bool> FileMonitor::property_cancelled() const
{
  return Glib::PropertyProxy_ReadOnly<bool>(this, "cancelled");
}
#endif //GLIBMM_PROPERTIES_ENABLED


#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
void Gio::FileMonitor::on_changed(const Glib::RefPtr<File>& file, const Glib::RefPtr<File>& other_file, FileMonitorEvent event_type)
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->changed)
    (*base->changed)(gobj(),Glib::unwrap(file),Glib::unwrap(other_file),((GFileMonitorEvent)(event_type)));
}
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED


} // namespace Gio


