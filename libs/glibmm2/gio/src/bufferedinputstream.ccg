// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* Copyright (C) 2008 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gio/gio.h>
#include "slot_async.h"

namespace Gio
{
Glib::RefPtr<BufferedInputStream> BufferedInputStream::create_sized(const Glib::RefPtr<InputStream>& base_stream, gsize size)
{
    return Glib::RefPtr<Gio::BufferedInputStream>(new BufferedInputStream(base_stream, size));
}

#ifdef GLIBMM_EXCEPTIONS_ENABLED
gssize BufferedInputStream::fill(gssize count)
#else
gssize BufferedInputStream::fill(gssize count, std::auto_ptr<Glib::Error>& error)
#endif //GLIBMM_EXCEPTIONS_ENABLED
{
  GError* gerror = 0;
  gssize retvalue = g_buffered_input_stream_fill(const_cast<GBufferedInputStream*>(gobj()), count, NULL, &(gerror));
#ifdef GLIBMM_EXCEPTIONS_ENABLED
  if(gerror)
    ::Glib::Error::throw_exception(gerror);
#else
  if(gerror)
    error = ::Glib::Error::throw_exception(gerror);
#endif //GLIBMM_EXCEPTIONS_ENABLED

  return retvalue;
}

void BufferedInputStream::fill_async(const SlotAsyncReady& slot,
                                     gssize count,
                                     const Glib::RefPtr<Cancellable>& cancellable,
                                     int io_priority)
{
  // Create a copy of the slot.
  // A pointer to it will be passed through the callback's data parameter
  // and deleted in the callback.
    SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);

    g_buffered_input_stream_fill_async(gobj(),
            count,
            io_priority,
            cancellable->gobj(),
            &SignalProxy_async_callback,
            slot_copy);
}

void BufferedInputStream::fill_async(const SlotAsyncReady& slot,
                                     gssize count,
                                     int io_priority)
{
  // Create a copy of the slot.
  // A pointer to it will be passed through the callback's data parameter
  // and deleted in the callback.
    SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);

    g_buffered_input_stream_fill_async(gobj(),
            count,
            io_priority,
            NULL,
            &SignalProxy_async_callback,
            slot_copy);
}

#ifdef GLIBMM_EXCEPTIONS_ENABLED
int BufferedInputStream::read_byte()
#else
int BufferedInputStream::read_byte(std::auto_ptr<Glib::Error>& error)
#endif //GLIBMM_EXCEPTIONS_ENABLED
{
  GError* gerror = 0;
  int retvalue = g_buffered_input_stream_read_byte(gobj(), NULL, &(gerror));
#ifdef GLIBMM_EXCEPTIONS_ENABLED
  if(gerror)
    ::Glib::Error::throw_exception(gerror);
#else
  if(gerror)
    error = ::Glib::Error::throw_exception(gerror);
#endif //GLIBMM_EXCEPTIONS_ENABLED

  return retvalue;

}


}   // namespace Gio
