// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* Copyright (C) 2007 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <giomm/bufferedoutputstream.h>
#include <giomm/enums.h>

_DEFS(giomm,gio)
_PINCLUDE(giomm/private/bufferedoutputstream_p.h)

namespace Gio
{

/**
 * An implementation of BufferedOutputStream that allows for high-level data
 * manipulation of arbitrary data (including binary operations).
 *
 * @ingroup Streams
 *
 * @newin2p16
 */
class DataOutputStream : public Gio::BufferedOutputStream
{
  _CLASS_GOBJECT(DataOutputStream, GDataOutputStream, G_DATA_OUTPUT_STREAM, Gio::BufferedOutputStream, GBufferedOutputStream)

protected:
  _WRAP_CTOR(DataOutputStream(const Glib::RefPtr<OutputStream>& base_stream), g_data_output_stream_new)

public:

  _WRAP_CREATE(const Glib::RefPtr<OutputStream>& base_stream)

  _WRAP_METHOD(void set_byte_order(DataStreamByteOrder order), g_data_output_stream_set_byte_order)
  _WRAP_METHOD(DataStreamByteOrder get_byte_order() const, g_data_output_stream_get_byte_order)

  _WRAP_METHOD(bool put_byte(guchar data, const Glib::RefPtr<Cancellable>& cancellable), g_data_output_stream_put_byte, errthrow)

  /** non-cancellable version of put_byte()
   */
#ifdef GLIBMM_EXCEPTIONS_ENABLED
  bool put_byte(guchar data);
#else
  bool put_byte(guchar data, std::auto_ptr<Glib::Error>& error);
#endif //GLIBMM_EXCEPTIONS_ENABLED

  _WRAP_METHOD(bool put_int16(gint16 data, const Glib::RefPtr<Cancellable>& cancellable), g_data_output_stream_put_int16, errthrow)
  /** non-cancellable version of put_int16()
   */
#ifdef GLIBMM_EXCEPTIONS_ENABLED
  bool put_int16(gint16 data);
#else
  bool put_int16(gint16 data, std::auto_ptr<Glib::Error>& error);
#endif //GLIBMM_EXCEPTIONS_ENABLED

  _WRAP_METHOD(bool put_uint16(guint16 data, const Glib::RefPtr<Cancellable>& cancellable), g_data_output_stream_put_uint16, errthrow)
  /** non-cancellable version of put_uint16()
   */
#ifdef GLIBMM_EXCEPTIONS_ENABLED
  bool put_uint16(guint16 data);
#else
  bool put_uint16(guint16 data, std::auto_ptr<Glib::Error>& error);
#endif //GLIBMM_EXCEPTIONS_ENABLED

  _WRAP_METHOD(bool put_int32(gint32 data, const Glib::RefPtr<Cancellable>& cancellable), g_data_output_stream_put_int32, errthrow)

  /** non-cancellable version of put_int32()
   */
#ifdef GLIBMM_EXCEPTIONS_ENABLED
  bool put_int32(gint32 data);
#else
  bool put_int32(gint32 data, std::auto_ptr<Glib::Error>& error);
#endif //GLIBMM_EXCEPTIONS_ENABLED

  _WRAP_METHOD(bool put_uint32(guint32 data, const Glib::RefPtr<Cancellable>& cancellable), g_data_output_stream_put_uint32, errthrow)
  /** non-cancellable version of put_uint32()
   */
#ifdef GLIBMM_EXCEPTIONS_ENABLED
  bool put_uint32(guint32 data);
#else
  bool put_uint32(guint32 data, std::auto_ptr<Glib::Error>& error);
#endif //GLIBMM_EXCEPTIONS_ENABLED

  _WRAP_METHOD(bool put_int64(gint64 data, const Glib::RefPtr<Cancellable>& cancellable), g_data_output_stream_put_int64, errthrow)
  /** non-cancellable version of put_int64()
   */
#ifdef GLIBMM_EXCEPTIONS_ENABLED
  bool put_int64(gint64 data);
#else
  bool put_int64(gint64 data, std::auto_ptr<Glib::Error>& error);
#endif //GLIBMM_EXCEPTIONS_ENABLED

  _WRAP_METHOD(bool put_uint64(guint64 data, const Glib::RefPtr<Cancellable>& cancellable), g_data_output_stream_put_uint64, errthrow)

  /** non-cancellable version of put_uint64()
   */
#ifdef GLIBMM_EXCEPTIONS_ENABLED
  bool put_uint64(guint64 data);
#else
  bool put_uint64(guint64 data, std::auto_ptr<Glib::Error>& error);
#endif //GLIBMM_EXCEPTIONS_ENABLED

  _WRAP_METHOD(bool put_string(std::string str, const Glib::RefPtr<Cancellable>& cancellable), g_data_output_stream_put_string, errthrow)

  /** non-cancellable version of put_string()
   */
#ifdef GLIBMM_EXCEPTIONS_ENABLED
  bool put_string(std::string str);
#else
  bool put_string(std::string str, std::auto_ptr<Glib::Error>& error);
#endif //GLIBMM_EXCEPTIONS_ENABLED

};

} // namespace Gio

