<root>
<function name="g_file_attribute_info_list_add">
<description>
Adds a new attribute with @name to the @list, setting
its @type and @flags. 

</description>
<parameters>
<parameter name="list">
<parameter_description> a #GFileAttributeInfoList.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the attribute to add.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the #GFileAttributeType for the attribute.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> #GFileAttributeInfoFlags for the attribute.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_output_stream_flush_async">
<description>
Flushes a stream asynchronously.
For behaviour details see g_output_stream_flush().

When the operation is finished @callback will be 
called. You can then call g_output_stream_flush_finish() to get the 
result of the operation.

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the io priority of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_input_stream_clear_pending">
<description>
Clears the pending flag on @stream.

</description>
<parameters>
<parameter name="stream">
<parameter_description> input stream
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_attribute_info_list_ref">
<description>
References a file attribute info list.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GFileAttributeInfoList to reference.
</parameter_description>
</parameter>
</parameters>
<return> #GFileAttributeInfoList or %NULL on error.
</return>
</function>

<function name="g_file_enumerator_is_closed">
<description>
Checks if the file enumerator has been closed.


</description>
<parameters>
<parameter name="enumerator">
<parameter_description> a #GFileEnumerator.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @enumerator is closed.
</return>
</function>

<function name="g_loadable_icon_load">
<description>
Loads a loadable icon. For the asynchronous version of this function, 
see g_loadable_icon_load_async().


</description>
<parameters>
<parameter name="icon">
<parameter_description> a #GLoadableIcon.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> an integer.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description>  a location to store the type of the loaded icon, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GInputStream to read the icon from.
</return>
</function>

<function name="g_mount_eject">
<description>
Ejects a mount. This is an asynchronous operation, and is 
finished by calling g_mount_eject_finish() with the @mount 
and #GAsyncResults data returned in the @callback.

</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the unmount if required for eject
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_set_attribute_string">
<description>
Sets the @attribute to contain the given @attr_value, 
if possible.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
<parameter name="attr_value">
<parameter_description> a string.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_drive_is_media_check_automatic">
<description>
Checks if @drive is capabable of automatically detecting media changes.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @drive is capabable of automatically detecting media changes, %FALSE otherwise.
</return>
</function>

<function name="g_cancellable_reset">
<description>
Resets @cancellable to its uncancelled state. 

</description>
<parameters>
<parameter name="cancellable">
<parameter_description> a #GCancellable object.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_unix_mount_monitor_new">
<description>
Gets a new #GUnixMountMonitor.


</description>
<parameters>
</parameters>
<return> a #GUnixMountMonitor. 
</return>
</function>

<function name="g_app_info_add_supports_type">
<description>
Adds a content type to the application information to indicate the 
application is capable of opening files with the given content type.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
<parameter name="content_type">
<parameter_description> a string.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on error.
</return>
</function>

<function name="g_file_info_get_size">
<description>
Gets the file&apos;s size.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> a #goffset containing the file&apos;s size. 
</return>
</function>

<function name="g_file_info_set_attribute">
<description>
Sets the @attribute to contain the given value, if possible.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #GFileAttributeType
</parameter_description>
</parameter>
<parameter name="value_p">
<parameter_description> pointer to the value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_make_symbolic_link">
<description>
Creates a symbolic link.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="symlink_value">
<parameter_description> a string with the value of the new symlink.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError. 
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on the creation of a new symlink, %FALSE otherwise.
</return>
</function>

<function name="g_input_stream_skip_finish">
<description>
Finishes a stream skip operation.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GInputStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> the size of the bytes skipped, or %-1 on error.
</return>
</function>

<function name="g_file_info_get_attribute_boolean">
<description>
Gets the value of a boolean attribute. If the attribute does not
contain a boolean value, %FALSE will be returned.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> the boolean value contained within the attribute. 
</return>
</function>

<function name="g_mount_operation_set_domain">
<description>
Sets the mount operation&apos;s domain. 

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
<parameter name="domain">
<parameter_description> the domain to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_set_sort_order">
<description>
Sets the sort order attribute in the file info structure. See 
%G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="sort_order">
<parameter_description> a sort order integer.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_unix_mount_point_is_loopback">
<description>
Checks if a unix mount point is a loopback device.


</description>
<parameters>
<parameter name="mount_point">
<parameter_description> a #GUnixMountPoint.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the mount point is a loopback. %FALSE otherwise. 
</return>
</function>

<function name="g_mount_operation_get_password">
<description>
Gets a password from the mount operation. 


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the password within @op.
</return>
</function>

<function name="g_file_enumerator_next_files_async">
<description>
Request information for a number of files from the enumerator asynchronously.
When all i/o for the operation is finished the @callback will be called with
the requested information. 

The callback can be called with less than @num_files files in case of error
or at the end of the enumerator. In case of a partial error the callback will
be called with any succeeding items and no error, and on the next request the
error will be reported. If a request is cancelled the callback will be called
with %G_IO_ERROR_CANCELLED.

During an async request no other sync and async calls are allowed, and will
result in %G_IO_ERROR_PENDING errors. 

Any outstanding i/o request with higher priority (lower numerical value) will
be executed before an outstanding request with lower priority. Default
priority is %G_PRIORITY_DEFAULT.

</description>
<parameters>
<parameter name="enumerator">
<parameter_description> a #GFileEnumerator.
</parameter_description>
</parameter>
<parameter name="num_files">
<parameter_description> the number of file info objects to request
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &amp;lt;link linkend=&quot;gioscheduler&quot;&amp;gt;io priority&amp;lt;/link&amp;gt; 
of the request. 
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_enumerate_children_async">
<description>
Asynchronously gets the requested information about the files in a directory. The result
is a #GFileEnumerator object that will give out #GFileInfo objects for
all the files in the directory.

For more details, see g_file_enumerate_children() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can then call
g_file_enumerate_children_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description> an attribute query string.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &amp;lt;link linkend=&quot;io-priority&quot;&amp;gt;I/O priority&amp;lt;/link&amp;gt; 
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mount_operation_get_username">
<description>
Get the user name from the mount operation.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the user name.
</return>
</function>

<function name="g_file_output_stream_query_info_async">
<description>
Asynchronously queries the @stream for a #GFileInfo. When completed,
@callback will be called with a #GAsyncResult which can be used to 
finish the operation with g_file_output_stream_query_info_finish().

For the synchronous version of this function, see 
g_file_output_stream_query_info().


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFileOutputStream.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description> a file attribute query string.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &amp;lt;link linkend=&quot;gio-GIOScheduler&quot;&amp;gt;I/O priority&amp;lt;/link&amp;gt; 
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_set_file_type">
<description>
Sets the file type in a #GFileInfo to @type.
See %G_FILE_ATTRIBUTE_STANDARD_TYPE.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #GFileType.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_data_input_stream_read_int16">
<description>
Reads a 16-bit/2-byte value from @stream.

In order to get the correct byte order for this read operation, 
see g_data_stream_get_byte_order() and g_data_stream_set_byte_order().


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting.
</parameter_description>
</parameter>
</parameters>
<return> a signed 16-bit/2-byte value read from @stream or %0 if 
an error occurred.
</return>
</function>

<function name="g_file_attribute_info_list_new">
<description>
Creates a new file attribute info list.


</description>
<parameters>
</parameters>
<return> a #GFileAttributeInfoList.
</return>
</function>

<function name="g_file_get_parse_name">
<description>
Gets the parse name of the @file.
A parse name is a UTF-8 string that describes the
file such that one can get the #GFile back using
g_file_parse_name().

This is generally used to show the #GFile as a nice
full-pathname kind of string in a user interface,
like in a location entry.

For local files with names that can safely be converted
to UTF8 the pathname is used, otherwise the IRI is used
(a form of URI that allows UTF8 characters unescaped).

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the #GFile&apos;s parse name. The returned 
string should be freed with g_free() when no longer needed.
</return>
</function>

<function name="g_async_result_get_user_data">
<description>
Gets the user data from a #GAsyncResult.


</description>
<parameters>
<parameter name="res">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
</parameters>
<return> the user data for @res. 
</return>
</function>

<function name="g_content_types_get_registered">
<description>
Gets a list of strings containing all the registered content types
known to the system. The list and its data should be freed using 
@g_list_foreach(list, g_free, NULL) and @g_list_free(list)

</description>
<parameters>
</parameters>
<return> #GList of the registered content types.
</return>
</function>

<function name="g_io_module_new">
<description>
Creates a new GIOModule that will load the specific
shared library when in use.


</description>
<parameters>
<parameter name="filename">
<parameter_description> filename of the shared library module.
</parameter_description>
</parameter>
</parameters>
<return> a #GIOModule from given @filename, 
or %NULL on error.
</return>
</function>

<function name="g_file_info_clear_status">
<description>
Clears the status information from @info.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_eject_mountable">
<description>
Starts an asynchronous eject on a mountable.  
When this operation has completed, @callback will be called with
@user_user data, and the operation can be finalized with 
g_file_eject_mountable_finish().

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the operation
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_get_is_backup">
<description>
Checks if a file is a backup file.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if file is a backup file, %FALSE otherwise.
</return>
</function>

<function name="g_unix_volume_set_mount">
<description>

</description>
<parameters>
<parameter name="volume">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="mount">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_load_contents_async">
<description>
Starts an asynchronous load of the @file&apos;s contents.

For more details, see g_file_load_contents() which is
the synchronous version of this call.

When the load operation has completed, @callback will be called 
with @user data. To finish the operation, call 
g_file_load_contents_finish() with the #GAsyncResult returned by 
the @callback.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_get_file_type">
<description>
Gets a file&apos;s type (whether it is a regular file, symlink, etc). 
This is different from the file&apos;s content type, see g_file_info_get_content_type().


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> a #GFileType for the given file.
</return>
</function>

<function name="GFileMonitor">
<description>
Emitted when a file has been changed. 

</description>
<parameters>
<parameter name="monitor">
<parameter_description> a #GFileMonitor.
</parameter_description>
</parameter>
<parameter name="file">
<parameter_description> a #GFile.
</parameter_description>
</parameter>
<parameter name="other_file">
<parameter_description> a #GFile.
</parameter_description>
</parameter>
<parameter name="event_type">
<parameter_description> a #GFileMonitorEvent.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_dup">
<description>
Duplicates a file info structure.


</description>
<parameters>
<parameter name="other">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> a duplicate #GFileInfo of @other.
</return>
</function>

<function name="g_file_info_get_is_symlink">
<description>
Checks if a file is a symlink.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the given @info is a symlink.
</return>
</function>

<function name="g_mount_can_unmount">
<description>
Checks if @mount can be mounted.


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @mount can be unmounted.
</return>
</function>

<function name="g_file_query_filesystem_info_finish">
<description>
Finishes an asynchronous filesystem info query.  See
g_file_query_filesystem_info_async().


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError. 
</parameter_description>
</parameter>
</parameters>
<return> #GFileInfo for given @file or %NULL on error.
</return>
</function>

<function name="g_filename_completer_new">
<description>
Creates a new filename completer.


</description>
<parameters>
</parameters>
<return> a #GFilenameCompleter.
</return>
</function>

<function name="g_data_output_stream_put_int16">
<description>
Puts a signed 16-bit integer into the output stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataOutputStream.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a #gint16.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @data was successfully added to the @stream.
</return>
</function>

<function name="g_io_extension_point_lookup">
<description>
Looks up an existing extension point.


</description>
<parameters>
<parameter name="name">
<parameter_description> the name of the extension point
</parameter_description>
</parameter>
</parameters>
<return> the #GIOExtensionPoint, or %NULL if there is no
registered extension point with the given name
</return>
</function>

<function name="g_volume_get_identifier">
<description>
Gets the identifier of the given kind for @volume. 
See the &amp;lt;link linkend=&quot;volume-identifier&quot;&amp;gt;introduction&amp;lt;/link&amp;gt;
for more information about volume identifiers.


</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume
</parameter_description>
</parameter>
<parameter name="kind">
<parameter_description> the kind of identifier to return
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string containing the
requested identfier, or %NULL if the #GVolume
doesn&apos;t have this kind of identifier
</return>
</function>

<function name="g_file_info_set_content_type">
<description>
Sets the content type attribute for a given #GFileInfo.
See %G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="content_type">
<parameter_description> a content type. See #GContentType.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GDesktopAppInfo">
<description>
Information about an installed application from a desktop file.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_unix_mount_point_guess_icon">
<description>
Guesses the icon of a Unix mount point. 


</description>
<parameters>
<parameter name="mount_point">
<parameter_description> a #GUnixMountPoint
</parameter_description>
</parameter>
</parameters>
<return> a #GIcon
</return>
</function>

<function name="g_io_extension_point_get_required_type">
<description>
Gets the required type for @extension_point.


</description>
<parameters>
<parameter name="extension_point">
<parameter_description> a #GIOExtensionPoint
</parameter_description>
</parameter>
</parameters>
<return> the #GType that all implementations must have, 
or #G_TYPE_INVALID if the extension point has no required type
</return>
</function>

<function name="g_loadable_icon_load_async">
<description>
Loads an icon asynchronously. To finish this function, see 
g_loadable_icon_load_finish(). For the synchronous, blocking 
version of this function, see g_loadable_icon_load().

</description>
<parameters>
<parameter name="icon">
<parameter_description> a #GLoadableIcon.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> an integer.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_data_input_stream_set_byte_order">
<description>
This function sets the byte order for the given @stream. All subsequent
reads from the @stream will be read in the given @order.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="order">
<parameter_description> a #GDataStreamByteOrder to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_set_display_name_finish">
<description>
Finishes setting a display name started with 
g_file_set_display_name_async().


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFile or %NULL on error.
</return>
</function>

<function name="g_file_info_set_edit_name">
<description>
Sets the edit name for the current file.
See %G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="edit_name">
<parameter_description> a string containing an edit name.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_unix_mount_point_free">
<description>
Frees a unix mount point.

</description>
<parameters>
<parameter name="mount_point">
<parameter_description> unix mount point to free.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_app_launch_context_get_startup_notify_id">
<description>
Initiates startup notification for the applicaiont and returns the
DESKTOP_STARTUP_ID for the launched operation, if supported.

Startup notification IDs are defined in the FreeDesktop.Org Startup 
Notifications standard, at 
&amp;lt;ulink url=&quot;http://standards.freedesktop.org/startup-notification-spec/startup-notification-latest.txt&quot;/&amp;gt;.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GAppLaunchContext.
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
<parameter name="files">
<parameter_description> a #GList of files.
</parameter_description>
</parameter>
</parameters>
<return> a startup notification ID for the application, or %NULL if 
not supported.
</return>
</function>

<function name="g_file_query_info_finish">
<description>
Finishes an asynchronous file info query. 
See g_file_query_info_async().


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError. 
</parameter_description>
</parameter>
</parameters>
<return> #GFileInfo for given @file or %NULL on error.
</return>
</function>

<function name="g_file_find_enclosing_mount_finish">
<description>
Finishes an asynchronous find mount request. 
See g_file_find_enclosing_mount_async().


</description>
<parameters>
<parameter name="file">
<parameter_description> a #GFile
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError
</parameter_description>
</parameter>
</parameters>
<return> #GMount for given @file or %NULL on error.
</return>
</function>

<function name="g_file_enumerator_close_finish">
<description>
Finishes closing a file enumerator, started from g_file_enumerator_close_async().

If the file enumerator was already closed when g_file_enumerator_close_async() 
was called, then this function will report %G_IO_ERROR_CLOSED in @error, and 
return %FALSE. If the file enumerator had pending operation when the close 
operation was started, then this function will report %G_IO_ERROR_PENDING, and
return %FALSE.  If @cancellable was not %NULL, then the operation may have been 
cancelled by triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be set, and %FALSE will be 
returned. 


</description>
<parameters>
<parameter name="enumerator">
<parameter_description> a #GFileEnumerator.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the close operation has finished successfully.
</return>
</function>

<function name="g_app_info_set_as_default_for_type">
<description>
Sets the application as the default handler for a given type.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
<parameter name="content_type">
<parameter_description> the content type.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on error.
</return>
</function>

<function name="GCancellable">
<description>
Emitted when the operation has been cancelled from another thread.

Can be used by implementations of cancellable operations. This will
be emitted in the thread that tried to cancel the operation, not the
thread the is running the operation.

</description>
<parameters>
<parameter name="cancellable">
<parameter_description> a #GCancellable.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_unix_mount_at">
<description>
Gets a #GUnixMountEntry for a given mount path. If @time_read
is set, it will be filled with a unix timestamp for checking
if the mounts have changed since with g_unix_mounts_changed_since().


</description>
<parameters>
<parameter name="mount_path">
<parameter_description> path for a possible unix mount.
</parameter_description>
</parameter>
<parameter name="time_read">
<parameter_description> guint64 to contain a timestamp.
</parameter_description>
</parameter>
</parameters>
<return> a #GUnixMount. 
</return>
</function>

<function name="g_file_copy_async">
<description>
Copies the file @source to the location specified by @destination 
asynchronously. For details of the behaviour, see g_file_copy().

If @progress_callback is not %NULL, then that function that will be called
just like in g_file_copy(), however the callback will run in the main loop,
not in the thread that is doing the I/O operation.

When the operation is finished, @callback will be called. You can then call
g_file_copy_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="source">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="destination">
<parameter_description> destination #GFile
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> set of #GFileCopyFlags
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &amp;lt;link linkend=&quot;io-priority&quot;&amp;gt;I/O priority&amp;lt;/link&amp;gt; 
of the request. 
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="progress_callback">
<parameter_description> function to callback with progress information
</parameter_description>
</parameter>
<parameter name="progress_callback_data">
<parameter_description> user data to pass to @progress_callback
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cancellable_is_cancelled">
<description>
Checks if a cancellable job has been cancelled.


</description>
<parameters>
<parameter name="cancellable">
<parameter_description> a #GCancellable or NULL.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @cancellable is cancelled, 
FALSE if called with %NULL or if item is not cancelled. 
</return>
</function>

<function name="g_drive_enumerate_identifiers">
<description>
Gets the kinds of identifiers that @drive has. 
Use g_drive_get_identifer() to obtain the identifiers
themselves.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive
</parameter_description>
</parameter>
</parameters>
<return> a %NULL-terminated array of strings containing
kinds of identifiers. Use g_strfreev() to free.
</return>
</function>

<function name="g_volume_monitor_get_volumes">
<description>
Gets a list of the volumes on the system.

The returned list should be freed with g_list_free(), after
its elements have been unreffed with g_object_unref().


</description>
<parameters>
<parameter name="volume_monitor">
<parameter_description> a #GVolumeMonitor.
</parameter_description>
</parameter>
</parameters>
<return> a #GList of #GVolume&amp;lt;!-- --&amp;gt;s.
</return>
</function>

<function name="g_memory_input_stream_new_from_data">
<description>
Creates a new #GMemoryInputStream with data in memory of a given size.


</description>
<parameters>
<parameter name="data">
<parameter_description> input data
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> length of the data, may be -1 if @data is a nul-terminated string
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> function that is called to free @data, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> new #GInputStream read from @data of @len bytes.
</return>
</function>

<function name="g_file_info_get_is_hidden">
<description>
Checks if a file is hidden.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the file is a hidden file, %FALSE otherwise.
</return>
</function>

<function name="g_themed_icon_get_names">
<description>
Gets the names of icons from within @icon.


</description>
<parameters>
<parameter name="icon">
<parameter_description> a #GThemedIcon.
</parameter_description>
</parameter>
</parameters>
<return> a list of icon names.
</return>
</function>

<function name="g_input_stream_is_closed">
<description>
Checks if an input stream is closed.


</description>
<parameters>
<parameter name="stream">
<parameter_description> input stream.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the stream is closed.
</return>
</function>

<function name="g_drive_has_volumes">
<description>
Check if @drive has any mountable volumes.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @drive contains volumes, %FALSE otherwise.
</return>
</function>

<function name="g_app_info_get_description">
<description>
Gets a human-readable description of an installed application.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
</parameters>
<return> a string containing a description of the 
application @appinfo, or %NULL if none. 
</return>
</function>

<function name="g_app_info_equal">
<description>
Checks if two #GAppInfos are equal.


</description>
<parameters>
<parameter name="appinfo1">
<parameter_description> the first #GAppInfo.  
</parameter_description>
</parameter>
<parameter name="appinfo2">
<parameter_description> the second #GAppInfo.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @appinfo1 is equal to @appinfo2. %FALSE otherwise.
</return>
</function>

<function name="g_unix_mount_guess_name">
<description>
Guesses the name of a Unix mount. 
The result is a translated string.


</description>
<parameters>
<parameter name="mount_entry">
<parameter_description> a #GUnixMountEntry
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated string that must
be freed with g_free()
</return>
</function>

<function name="g_output_stream_is_closed">
<description>
Checks if an output stream has already been closed.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @stream is closed. %FALSE otherwise. 
</return>
</function>

<function name="g_file_get_path">
<description>
Gets the local pathname for #GFile, if one exists. 

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
</parameters>
<return> string containing the #GFile&apos;s path, or %NULL if 
no such path exists. The returned string should be 
freed with g_free() when no longer needed.
</return>
</function>

<function name="g_input_stream_close_async">
<description>
Requests an asynchronous closes of the stream, releasing resources related to it.
When the operation is finished @callback will be called. 
You can then call g_input_stream_close_finish() to get the result of the 
operation.

For behaviour details see g_input_stream_close().

The asyncronous methods have a default fallback that uses threads to implement
asynchronicity, so they are optional for inheriting classes. However, if you
override one you must override all.

</description>
<parameters>
<parameter name="stream">
<parameter_description> A #GInputStream.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &amp;lt;link linkend=&quot;io-priority&quot;&amp;gt;I/O priority&amp;lt;/link&amp;gt; 
of the request. 
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional cancellable object
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_input_stream_query_info">
<description>
Queries a file input stream the given @attributes. This function blocks 
while querying the stream. For the asynchronous (non-blocking) version 
of this function, see g_file_input_stream_query_info_async(). While the 
stream is blocked, the stream will set the pending flag internally, and 
any other operations on the stream will fail with %G_IO_ERROR_PENDING.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFileInputStream.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description> a file attribute query string.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GFileInfo, or %NULL on error.
</return>
</function>

<function name="g_volume_can_mount">
<description>
Checks if a volume can be mounted.


</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @volume can be mounted. %FALSE otherwise.
</return>
</function>

<function name="g_simple_async_result_get_source_tag">
<description>
Gets the source tag for the #GSimpleAsyncResult.


</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
</parameters>
<return> a #gpointer to the source object for the #GSimpleAsyncResult.
</return>
</function>

<function name="g_file_append_to">
<description>
Gets an output stream for appending data to the file. If
the file doesn&apos;t already exist it is created.

By default files created are generally readable by everyone,
but if you pass #G_FILE_CREATE_PRIVATE in @flags the file
will be made readable only to the current user, to the level that
is supported on the target filesystem.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

Some file systems don&apos;t allow all file names, and may
return an G_IO_ERROR_INVALID_FILENAME error.
If the file is a directory the G_IO_ERROR_IS_DIRECTORY error will be
returned. Other errors are possible too, and depend on what kind of
filesystem the file is on.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileCreateFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFileOutputStream.
</return>
</function>

<function name="g_volume_monitor_get">
<description>
Gets the volume monitor used by gio.


</description>
<parameters>
</parameters>
<return> a reference to the #GVolumeMonitor used by gio. Call
g_object_unref() when done with it.
</return>
</function>

<function name="g_buffered_input_stream_peek_buffer">
<description>
Returns: read-only buffer

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GBufferedInputStream.
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> a #gsize to get the number of bytes available in the buffer.
</parameter_description>
</parameter>
</parameters>
<return> read-only buffer
</return>
</function>

<function name="GDrive">
<description>
Emitted when the physical eject button (if any) of a drive have been pressed.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_mount_enclosing_volume_finish">
<description>
Finishes a mount operation started by g_file_mount_enclosing_volume().


</description>
<parameters>
<parameter name="location">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful. If an error
has occurred, this function will return %FALSE and set @error
appropriately if present.
</return>
</function>

<function name="g_input_stream_set_pending">
<description>
Sets @stream to have actions pending. If the pending flag is
already set or @stream is closed, it will return %FALSE and set
@error.


</description>
<parameters>
<parameter name="stream">
<parameter_description> input stream
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if pending was previously unset and is now set.
</return>
</function>

<function name="g_file_set_attribute_int32">
<description>
Sets @attribute of type %G_FILE_ATTRIBUTE_TYPE_INT32 to @value. 
If @attribute is of a different type, this operation will fail.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a string containing the attribute&apos;s name.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #gint32 containing the attribute&apos;s new value.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @attribute was successfully set to @value 
in the @file, %FALSE otherwise. 
</return>
</function>

<function name="g_file_monitor_cancel">
<description>
Cancels a file monitor.


</description>
<parameters>
<parameter name="monitor">
<parameter_description> a #GFileMonitor.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if monitor was cancelled.
</return>
</function>

<function name="g_data_output_stream_new">
<description>
Creates a new data output stream for @base_stream.


</description>
<parameters>
<parameter name="base_stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
</parameters>
<return> #GDataOutputStream.
</return>
</function>

<function name="g_mount_get_root">
<description>
Gets the root directory on @mount.


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
</parameters>
<return> a #GFile.
</return>
</function>

<function name="g_file_icon_get_file">
<description>
Gets the #GFile associated with the given @icon.


</description>
<parameters>
<parameter name="icon">
<parameter_description> a #GIcon.
</parameter_description>
</parameter>
</parameters>
<return> a #GFile, or %NULL.
</return>
</function>

<function name="g_unix_input_stream_new">
<description>
Creates a new #GUnixInputStream for the given @fd. If @close_fd_at_close
is %TRUE, the file descriptor will be closed when the stream is closed.


</description>
<parameters>
<parameter name="fd">
<parameter_description> unix file descriptor.
</parameter_description>
</parameter>
<parameter name="close_fd_at_close">
<parameter_description> a #gboolean.
</parameter_description>
</parameter>
</parameters>
<return> a #GUnixInputStream. 
</return>
</function>

<function name="g_data_input_stream_read_byte">
<description>
Reads an unsigned 8-bit/1-byte value from @stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting.
</parameter_description>
</parameter>
</parameters>
<return> an unsigned 8-bit/1-byte value read from the @stream or %0 
if an error occurred.
</return>
</function>

<function name="g_app_info_launch">
<description>
Launches the application. Passes @files to the launched application 
as arguments, using the optional @launch_context to get information
about the details of the launcher (like what screen it is on).
On error, @error will be set accordingly.

To lauch the application without arguments pass a %NULL @files list.

Note that even if the launch is successful the application launched
can fail to start if it runs into problems during startup. There is
no way to detect this.

Some URIs can be changed when passed through a GFile (for instance
unsupported uris with strange formats like mailto:), so if you have
a textual uri you want to pass in as argument, consider using
g_app_info_launch_uris() instead.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
<parameter name="files">
<parameter_description> a #GList of #GFile objects.
</parameter_description>
</parameter>
<parameter name="launch_context">
<parameter_description> a #GAppLaunchContext.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on successful launch, %FALSE otherwise. 
</return>
</function>

<function name="g_file_delete">
<description>
Deletes a file. If the @file is a directory, it will only be deleted if it 
is empty.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL 
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the file was deleted. %FALSE otherwise.
</return>
</function>

<function name="g_seekable_seek">
<description>
Seeks in the stream by the given @offset, modified by @type.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="seekable">
<parameter_description> a #GSeekable.
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> a #goffset.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #GSeekType.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful. If an error
has occurred, this function will return %FALSE and set @error
appropriately if present.
</return>
</function>

<function name="g_desktop_app_info_new_from_filename">
<description>
Creates a new #GDesktopAppInfo.


</description>
<parameters>
<parameter name="filename">
<parameter_description> a string containing a file name.
</parameter_description>
</parameter>
</parameters>
<return> a new #GDesktopAppInfo or %NULL on error.
</return>
</function>

<function name="g_io_extension_point_get_extension_by_name">
<description>
Finds a #GIOExtension for an extension point by name.


</description>
<parameters>
<parameter name="extension_point">
<parameter_description> a #GIOExtensionPoint
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the extension to get
</parameter_description>
</parameter>
</parameters>
<return> the #GIOExtension for @extension_point that has the
given name, or %NULL if there is no extension with that name
</return>
</function>

<function name="g_data_input_stream_get_newline_type">
<description>
Gets the current newline type for the @stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
</parameters>
<return> #GDataStreamNewlineType for the given @stream.
</return>
</function>

<function name="g_drive_can_poll_for_media">
<description>
Checks if a drive can be polled for media changes.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @drive can be polled for media changes. %FALSE otherwise.
</return>
</function>

<function name="g_output_stream_write_finish">
<description>
Finishes a stream write operation.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #gssize containing the number of bytes written to the stream.
</return>
</function>

<function name="g_memory_input_stream_new">
<description>
Creates a new empty #GMemoryInputStream. 


</description>
<parameters>
</parameters>
<return> a new #GInputStream
</return>
</function>

<function name="g_volume_can_eject">
<description>
Checks if a volume can be ejected.


</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @volume can be ejected. %FALSE otherwise.
</return>
</function>

<function name="g_app_info_create_from_commandline">
<description>
Creates a new #GAppInfo from the given information.


</description>
<parameters>
<parameter name="commandline">
<parameter_description> the commandline to use
</parameter_description>
</parameter>
<parameter name="application_name">
<parameter_description> the application name, or %NULL to use @commandline
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags that can specify details of the created #GAppInfo
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> new #GAppInfo for given command.
</return>
</function>

<function name="g_file_input_stream_query_info_finish">
<description>
Finishes an asynchronous info query operation.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFileInputStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, 
or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> #GFileInfo. 
</return>
</function>

<function name="g_dummy_file_new">
<description>

</description>
<parameters>
<parameter name="uri">
<parameter_description> Universal Resource Identifier for the dummy file object.
</parameter_description>
</parameter>
</parameters>
<return> a new #GFile. 
</return>
</function>

<function name="g_desktop_app_info_new">
<description>
Creates a new #GDesktopAppInfo.


</description>
<parameters>
<parameter name="desktop_id">
<parameter_description> the desktop file id
</parameter_description>
</parameter>
</parameters>
<return> a new #GDesktopAppInfo, or %NULL if no desktop file with that id
</return>
</function>

<function name="g_io_scheduler_job_send_to_mainloop_async">
<description>
Used from an I/O job to send a callback to be run asynchronously 
in the main loop (main thread). The callback will be run when the 
main loop is available, but at that time the I/O job might have 
finished. The return value from the callback is ignored.

Note that if you are passing the @user_data from g_io_scheduler_push_job()
on to this function you have to ensure that it is not freed before
@func is called, either by passing %NULL as @notify to 
g_io_scheduler_push_job() or by using refcounting for @user_data.

</description>
<parameters>
<parameter name="job">
<parameter_description> a #GIOSchedulerJob
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a #GSourceFunc callback that will be called in the main thread
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to pass to @func
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> a #GDestroyNotify for @user_data, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_filename_completer_get_completions">
<description>
Gets an array of completion strings for a given initial text.


</description>
<parameters>
<parameter name="completer">
<parameter_description> the filename completer.
</parameter_description>
</parameter>
<parameter name="initial_text">
<parameter_description> text to be completed.
</parameter_description>
</parameter>
</parameters>
<return> array of strings with possible completions for @initial_text.
This array must be freed by g_strfreev() when finished. 
</return>
</function>

<function name="g_data_output_stream_get_byte_order">
<description>
Gets the byte order for the stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataOutputStream.
</parameter_description>
</parameter>
</parameters>
<return> the #GDataStreamByteOrder for the @stream.
</return>
</function>

<function name="g_simple_async_result_set_from_error">
<description>
Sets the result from a #GError. 

</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_set_display_name">
<description>
Renames @file to the specified display name.

The display name is converted from UTF8 to the correct encoding for the target
filesystem if possible and the @file is renamed to this.

If you want to implement a rename operation in the user interface the edit name
(#G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME) should be used as the initial value in the rename
widget, and then the result after editing should be passed to g_file_set_display_name().

On success the resulting converted filename is returned.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="display_name">
<parameter_description> a string.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFile specifying what @file was renamed to, or %NULL if there was an error.
</return>
</function>

<function name="g_file_info_set_attribute_int64">
<description>
Sets the @attribute to contain the given @attr_value, 
if possible.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> attribute name to set.
</parameter_description>
</parameter>
<parameter name="attr_value">
<parameter_description> int64 value to set attribute to.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_data_input_stream_read_uint16">
<description>
Reads an unsigned 16-bit/2-byte value from @stream.

In order to get the correct byte order for this read operation, 
see g_data_stream_get_byte_order() and g_data_stream_set_byte_order(). 


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting.
</parameter_description>
</parameter>
</parameters>
<return> an unsigned 16-bit/2-byte value read from the @stream or %0 if 
an error occurred. 
</return>
</function>

<function name="g_mount_remount_finish">
<description>
Finishes remounting a mount. If any errors occurred during the operation, 
@error will be set to contain the errors and %FALSE will be returned.


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the mount was successfully remounted. %FALSE otherwise.
</return>
</function>

<function name="g_file_info_get_icon">
<description>
Gets the icon for a file.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> #GIcon for the given @info.
</return>
</function>

<function name="g_file_new_for_commandline_arg">
<description>
Creates a #GFile with the given argument from the command line. The value of
@arg can be either a URI, an absolute path or a relative path resolved
relative to the current working directory.
This operation never fails, but the returned object might not support any
I/O operation if @arg points to a malformed path.


</description>
<parameters>
<parameter name="arg">
<parameter_description> a command line string.
</parameter_description>
</parameter>
</parameters>
<return> a new #GFile. 
</return>
</function>

<function name="g_io_error_quark">
<description>
Gets the GIO Error Quark.


</description>
<parameters>
</parameters>
<return> a #GQuark.
</return>
</function>

<function name="g_io_extension_point_set_required_type">
<description>
Sets the required type for @extension_point to @type. 
All implementations must henceforth have this type.

</description>
<parameters>
<parameter name="extension_point">
<parameter_description> a #GIOExtensionPoint
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the #GType to require
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GVolume">
<description>
This signal is emitted when the #GVolume have been removed. If
the recipient is holding references to the object they should
release them so the object can be finalized.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_file_query_settable_attributes">
<description>
Obtain the list of settable attributes for the file.

Returns: a #GFileAttributeInfoList describing the settable attributes.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFileAttributeInfoList describing the settable attributes.
When you are done with it, release it with g_file_attribute_info_list_unref()
</return>
</function>

<function name="GDataOutputStream">
<description>
Determines the byte ordering that is used when writing 
multi-byte entities (such as integers) to the stream.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_file_get_child_for_display_name">
<description>
Gets the child of @file for a given @display_name (i.e. a UTF8
version of the name). If this function fails, it returns %NULL and @error will be 
set. This is very useful when constructing a GFile for a new file
and the user entered the filename in the user interface, for instance
when you select a directory and type a filename in the file selector.

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="display_name">
<parameter_description> string to a possible child.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError.
</parameter_description>
</parameter>
</parameters>
<return> a #GFile to the specified child, or 
%NULL if the display name couldn&apos;t be converted.  
</return>
</function>

<function name="g_file_query_info_async">
<description>
Asynchronously gets the requested information about specified @file. The result
is a #GFileInfo object that contains key-value attributes (such as type or size
for the file).

For more details, see g_file_query_info() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can then call
g_file_query_info_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description> an attribute query string.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &amp;lt;link linkend=&quot;io-priority&quot;&amp;gt;I/O priority&amp;lt;/link&amp;gt; 
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_app_info_remove_supports_type">
<description>
Removes a supported type from an application, if possible.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
<parameter name="content_type">
<parameter_description> a string.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on error.
</return>
</function>

<function name="g_io_scheduler_push_job">
<description>
Schedules the I/O job to run. 

@notify will be called on @user_data after @job_func has returned,
regardless whether the job was cancelled or has run to completion.

If @cancellable is not %NULL, it can be used to cancel the I/O job
by calling g_cancellable_cancel() or by calling 
g_io_scheduler_cancel_all_jobs().

</description>
<parameters>
<parameter name="job_func">
<parameter_description> a #GIOSchedulerJobFunc.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to pass to @job_func
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> a #GDestroyNotify for @user_data, or %NULL
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &amp;lt;link linkend=&quot;gioscheduler&quot;&amp;gt;I/O priority&amp;lt;/link&amp;gt; 
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_set_attribute_byte_string">
<description>
Sets @attribute of type %G_FILE_ATTRIBUTE_TYPE_BYTE_STRING to @value. 
If @attribute is of a different type, this operation will fail, 
returning %FALSE. 

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a string containing the attribute&apos;s name.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a string containing the attribute&apos;s new value.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @attribute was successfully set to @value 
in the @file, %FALSE otherwise.
</return>
</function>

<function name="g_data_input_stream_set_newline_type">
<description>
Sets the newline type for the @stream.

Note that using G_DATA_STREAM_NEWLINE_TYPE_ANY is slightly unsafe. If a read
chunk ends in &quot;CR&quot; we must read an additional byte to know if this is &quot;CR&quot; or
&quot;CR LF&quot;, and this might block if there is no more data availible.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the type of new line return as #GDataStreamNewlineType.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_simple_async_result_set_op_res_gboolean">
<description>
Sets the operation result to a boolean within the asynchronous result.

</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
<parameter name="op_res">
<parameter_description> a #gboolean.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_buffered_input_stream_peek">
<description>
Peeks in the buffer, copying data of size @count into @buffer, 
offset @offset bytes.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GBufferedInputStream.
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a pointer to an allocated chunk of memory.
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> a #gsize.
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> a #gsize.
</parameter_description>
</parameter>
</parameters>
<return> a #gsize of the number of bytes peeked, or %-1 on error.
</return>
</function>

<function name="g_mount_operation_set_password">
<description>
Sets the mount operation&apos;s password to @password.  


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
<parameter name="password">
<parameter_description> password to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mount_operation_set_anonymous">
<description>
Sets the mount operation to use an anonymous user if @anonymous is %TRUE.

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
<parameter name="anonymous">
<parameter_description> boolean value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_set_attribute_uint32">
<description>
Sets the @attribute to contain the given @attr_value, 
if possible.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
<parameter name="attr_value">
<parameter_description> an unsigned 32-bit integer.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_volume_get_name">
<description>
Gets the name of @volume.


</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume.
</parameter_description>
</parameter>
</parameters>
<return> the name for the given @volume. The returned string should 
be freed when no longer needed.
</return>
</function>

<function name="g_simple_async_result_complete_in_idle">
<description>
Completes an asynchronous function in the main event loop using 
an idle function.

</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_set_attribute_byte_string">
<description>
Sets the @attribute to contain the given @attr_value, 
if possible.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
<parameter name="attr_value">
<parameter_description> a byte string.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_unix_mount_point_get_fs_type">
<description>
Gets the file system type for the mount point.


</description>
<parameters>
<parameter name="mount_point">
<parameter_description> a #GUnixMountPoint.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the file system type.
</return>
</function>

<function name="g_drive_has_media">
<description>
Checks if the @drive has media. Note that the OS may not be polling
the drive for media changes; see g_drive_is_media_check_automatic()
for more details.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @drive has media, %FALSE otherwise.
</return>
</function>

<function name="g_file_attribute_matcher_enumerate_namespace">
<description>
Checks if the matcher will match all of the keys in a given namespace.
This will always return %TRUE if a wildcard character is in use (e.g. if 
matcher was created with &quot;standard::*&quot; and @ns is &quot;standard&quot;, or if matcher was created
using &quot;*&quot; and namespace is anything.) 

TODO: this is awkwardly worded.


</description>
<parameters>
<parameter name="matcher">
<parameter_description> a #GFileAttributeMatcher.
</parameter_description>
</parameter>
<parameter name="ns">
<parameter_description> a string containing a file attribute namespace.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the matcher matches all of the entries
in the given @ns, %FALSE otherwise.
</return>
</function>

<function name="g_simple_async_result_get_op_res_gboolean">
<description>
Gets the operation result boolean from within the asynchronous result.


</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the operation&apos;s result was %TRUE, %FALSE 
if the operation&apos;s result was %FALSE. 
</return>
</function>

<function name="g_simple_async_result_set_op_res_gssize">
<description>
Sets the operation result within the asynchronous result to 
the given @op_res. 

</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
<parameter name="op_res">
<parameter_description> a #gssize.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_content_type_get_icon">
<description>
Gets the icon for a content type.


</description>
<parameters>
<parameter name="type">
<parameter_description> a content type string.
</parameter_description>
</parameter>
</parameters>
<return> #GIcon corresponding to the content type.
</return>
</function>

<function name="mime_info_cache_reload">
<description>
Reload the mime information for the @dir.

</description>
<parameters>
<parameter name="dir">
<parameter_description> directory path which needs reloading.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_loadable_icon_load_finish">
<description>
Finishes an asynchronous icon load started in g_loadable_icon_load_async().


</description>
<parameters>
<parameter name="icon">
<parameter_description> a #GLoadableIcon.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a location to store the type of the loaded icon, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GInputStream to read the icon from.
</return>
</function>

<function name="g_file_query_info">
<description>
Gets the requested information about specified @file. The result
is a #GFileInfo object that contains key-value attributes (such as 
the type or size of the file).

The @attribute value is a string that specifies the file attributes that
should be gathered. It is not an error if it&apos;s not possible to read a particular
requested attribute from a file - it just won&apos;t be set. @attribute should
be a comma-separated list of attribute or attribute wildcards. The wildcard &quot;*&quot;
means all attributes, and a wildcard like &quot;standard::*&quot; means all attributes in the standard
namespace. An example attribute query be &quot;standard::*,owner::user&quot;.
The standard attributes are available as defines, like #G_FILE_ATTRIBUTE_STANDARD_NAME.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

For symlinks, normally the information about the target of the
symlink is returned, rather than information about the symlink itself.
However if you pass #G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS in @flags the
information about the symlink itself will be returned. Also, for symlinks
that point to non-existing files the information about the symlink itself
will be returned.

If the file does not exist, the G_IO_ERROR_NOT_FOUND error will be returned.
Other errors are possible too, and depend on what kind of filesystem the file is on.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description> an attribute query string.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError.
</parameter_description>
</parameter>
</parameters>
<return> a #GFileInfo for the given @file, or %NULL on error.
</return>
</function>

<function name="g_file_info_has_attribute">
<description>
Checks if a file info structure has an attribute named @attribute.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @Ginfo has an attribute named @attribute, 
%FALSE otherwise.
</return>
</function>

<function name="g_drive_get_volumes">
<description>
Get a list of mountable volumes for @drive.

The returned list should be freed with g_list_free(), after
its elements have been unreffed with g_object_unref().


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
</parameters>
<return> #GList containing any #GVolume&amp;lt;!----&amp;gt;s on the given @drive.
</return>
</function>

<function name="g_desktop_app_info_set_desktop_env">
<description>
Sets the name of the desktop that the application is running in.
This is used by g_app_info_should_show() to evaluate the
&amp;lt;literal&amp;gt;OnlyShowIn&amp;lt;/literal&amp;gt; and &amp;lt;literal&amp;gt;NotShowIn&amp;lt;/literal&amp;gt;
desktop entry fields.

The &amp;lt;ulink url=&quot;http://standards.freedesktop.org/menu-spec/latest/&quot;&amp;gt;Desktop 
Menu specification&amp;lt;/ulink&amp;gt; recognizes the following:
&amp;lt;simplelist&amp;gt;
&amp;lt;member&amp;gt;GNOME&amp;lt;/member&amp;gt;
&amp;lt;member&amp;gt;KDE&amp;lt;/member&amp;gt;
&amp;lt;member&amp;gt;ROX&amp;lt;/member&amp;gt;
&amp;lt;member&amp;gt;XFCE&amp;lt;/member&amp;gt;
&amp;lt;member&amp;gt;Old&amp;lt;/member&amp;gt; 
&amp;lt;/simplelist&amp;gt;

Should be called only once; subsequent calls are ignored.

</description>
<parameters>
<parameter name="desktop_env">
<parameter_description> a string specifying what desktop this is
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GMount">
<description>
This signal is emitted when the #GMount have been
unmounted. If the recipient is holding references to the
object they should release them so the object can be
finalized.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_mount_eject_finish">
<description>
Finishes ejecting a mount. If any errors occurred during the operation, 
@error will be set to contain the errors and %FALSE will be returned.


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the mount was successfully ejected. %FALSE otherwise.
</return>
</function>

<function name="g_output_stream_set_pending">
<description>
Sets @stream to have actions pending. If the pending flag is
already set or @stream is closed, it will return %FALSE and set
@error.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if pending was previously unset and is now set.
</return>
</function>

<function name="g_file_info_get_attribute_status">
<description>
Gets the attribute status for an attribute key.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key
</parameter_description>
</parameter>
</parameters>
<return> a #GFileAttributeStatus for the given @attribute, or 
%G_FILE_ATTRIBUTE_STATUS_UNSET if the key is invalid.

</return>
</function>

<function name="g_cancellable_new">
<description>
Creates a new #GCancellable object.

Applications that want to start one or more operations
that should be cancellable should create a #GCancellable
and pass it to the operations.

One #GCancellable can be used in multiple consecutive
operations, but not in multiple concurrent operations.


</description>
<parameters>
</parameters>
<return> a #GCancellable.
</return>
</function>

<function name="g_input_stream_skip">
<description>
Tries to skip @count bytes from the stream. Will block during the operation.

This is identical to g_input_stream_read(), from a behaviour standpoint,
but the bytes that are skipped are not returned to the user. Some
streams have an implementation that is more efficient than reading the data.

This function is optional for inherited classes, as the default implementation
emulates it using read.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
operation was partially finished when the operation was cancelled the
partial result will be returned, without an error.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GInputStream.
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> the number of bytes that will be skipped from the stream
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> Number of bytes skipped, or -1 on error
</return>
</function>

<function name="g_mount_operation_set_password_save">
<description>
Sets the state of saving passwords for the mount operation.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
<parameter name="save">
<parameter_description> a set of #GPasswordSave flags.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_app_info_launch_default_for_uri">
<description>
Utility function that launches the default application 
registered to handle the specified uri. Synchronous I/O
is done on the uri to detext the type of the file if
required.


</description>
<parameters>
<parameter name="uri">
<parameter_description> the uri to show
</parameter_description>
</parameter>
<parameter name="launch_context">
<parameter_description> an optional #GAppLaunchContext.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on error.
</return>
</function>

<function name="g_file_attribute_info_list_dup">
<description>
Makes a duplicate of a file attribute info list.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GFileAttributeInfoList to duplicate.
</parameter_description>
</parameter>
</parameters>
<return> a copy of the given @list. 
</return>
</function>

<function name="g_file_enumerator_set_pending">
<description>
Sets the file enumerator as having pending operations.

</description>
<parameters>
<parameter name="enumerator">
<parameter_description> a #GFileEnumerator.
</parameter_description>
</parameter>
<parameter name="pending">
<parameter_description> a boolean value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cancellable_get_fd">
<description>
Gets the file descriptor for a cancellable job. This can be used to
implement cancellable operations on Unix systems. The returned fd will
turn readable when @cancellable is cancelled.


</description>
<parameters>
<parameter name="cancellable">
<parameter_description> a #GCancellable.
</parameter_description>
</parameter>
</parameters>
<return> A valid file descriptor. %-1 if the file descriptor 
is not supported, or on errors. 
</return>
</function>

<function name="g_buffered_input_stream_fill_finish">
<description>
Finishes an asynchronous read.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GBufferedInputStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError.
</parameter_description>
</parameter>
</parameters>
<return> a #gssize of the read stream, or %-1 on an error. 
</return>
</function>

<function name="g_mount_get_icon">
<description>
Gets the icon for @mount.


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
</parameters>
<return> a #GIcon.
</return>
</function>

<function name="g_mount_operation_reply">
<description>
Emits the #GMountOperation::reply signal.

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GMountOperationResult
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_themed_icon_new_with_default_fallbacks">
<description>
Creates a new themed icon for @iconname, and all the names
that can be created by shortening @iconname at &apos;-&apos; characters.

In the following example, @icon1 and @icon2 are equivalent:
|[
const char *names[] = { 
&quot;gnome-dev-cdrom-audio&quot;,
&quot;gnome-dev-cdrom&quot;,
&quot;gnome-dev&quot;,
&quot;gnome&quot;
};

icon1 = g_themed_icon_new_from_names (names, 4);
icon2 = g_themed_icon_new_with_default_fallbacks (&quot;gnome-dev-cdrom-audio&quot;);
]|


</description>
<parameters>
<parameter name="iconname">
<parameter_description> a string containing an icon name
</parameter_description>
</parameter>
</parameters>
<return> a new #GThemedIcon.
</return>
</function>

<function name="g_file_make_directory">
<description>
Creates a directory.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL 
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on successful creation, %FALSE otherwise.
</return>
</function>

<function name="g_drive_can_eject">
<description>
Checks if a drive can be ejected.


</description>
<parameters>
<parameter name="drive">
<parameter_description> pointer to a #GDrive.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @drive can be ejected. %FALSE otherwise.
</return>
</function>

<function name="g_volume_monitor_adopt_orphan_mount">
<description>
This function should be called by any #GVolumeMonitor
implementation when a new #GMount object is created that is not
associated with a #GVolume object. It must be called just before
emitting the @mount_added signal.

If the return value is not %NULL, the caller must associate the
returned #GVolume object with the #GMount. This involves returning
it in it&apos;s g_mount_get_volume() implementation. The caller must
also listen for the &quot;removed&quot; signal on the returned object
and give up it&apos;s reference when handling that signal

Similary, if implementing g_volume_monitor_adopt_orphan_mount(),
the implementor must take a reference to @mount and return it in
it&apos;s g_volume_get_mount() implemented. Also, the implementor must
listen for the &quot;unmounted&quot; signal on @mount and give up it&apos;s
reference upon handling that signal.

There are two main use cases for this function.

One is when implementing a user space file system driver that reads
blocks of a block device that is already represented by the native
volume monitor (for example a CD Audio file system driver). Such
a driver will generate it&apos;s own #GMount object that needs to be
assoicated with the #GVolume object that represents the volume.

The other is for implementing a #GVolumeMonitor whose sole purpose
is to return #GVolume objects representing entries in the users
&quot;favorite servers&quot; list or similar.


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount object to find a parent for
</parameter_description>
</parameter>
</parameters>
<return> the #GVolume object that is the parent for @mount or %NULL
if no wants to adopt the #GMount.
</return>
</function>

<function name="g_output_stream_close_finish">
<description>
Closes an output stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if stream was successfully closed, %FALSE otherwise.
</return>
</function>

<function name="g_cancellable_push_current">
<description>
Pushes @cancellable onto the cancellable stack. The current
cancllable can then be recieved using g_cancellable_get_current().

This is useful when implementing cancellable operations in
code that does not allow you to pass down the cancellable object.

This is typically called automatically by e.g. #GFile operations,
so you rarely have to call this yourself.

</description>
<parameters>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_output_stream_write_async">
<description>
Request an asynchronous write of @count bytes from @buffer into 
the stream. When the operation is finished @callback will be called.
You can then call g_output_stream_write_finish() to get the result of the 
operation.

During an async request no other sync and async calls are allowed, 
and will result in %G_IO_ERROR_PENDING errors. 

A value of @count larger than %G_MAXSSIZE will cause a 
%G_IO_ERROR_INVALID_ARGUMENT error.

On success, the number of bytes written will be passed to the
@callback. It is not an error if this is not the same as the 
requested size, as it can happen e.g. on a partial I/O error, 
but generally we try to write as many bytes as requested. 

Any outstanding I/O request with higher priority (lower numerical 
value) will be executed before an outstanding request with lower 
priority. Default priority is %G_PRIORITY_DEFAULT.

The asyncronous methods have a default fallback that uses threads 
to implement asynchronicity, so they are optional for inheriting 
classes. However, if you override one you must override all.

For the synchronous, blocking version of this function, see 
g_output_stream_write().

</description>
<parameters>
<parameter name="stream">
<parameter_description> A #GOutputStream.
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> the buffer containing the data to write. 
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> the number of bytes to write
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the io priority of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="get_all_desktop_entries_for_mime_type">
<description>
Return value: a #GList containing the desktop ids which claim

</description>
<parameters>
<parameter name="mime_type">
<parameter_description> a mime type.
</parameter_description>
</parameter>
</parameters>
<return> a #GList containing the desktop ids which claim
to handle @mime_type.
</return>
</function>

<function name="g_file_enumerator_next_file">
<description>
Return value: A #GFileInfo or %NULL on error or end of enumerator

</description>
<parameters>
<parameter name="enumerator">
<parameter_description> a #GFileEnumerator.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> A #GFileInfo or %NULL on error or end of enumerator
</return>
</function>

<function name="g_file_info_set_symlink_target">
<description>
Sets the %G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET attribute in the file info 
to the given symlink target.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="symlink_target">
<parameter_description> a static string containing a path to a symlink target.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mount_operation_get_domain">
<description>
Gets the domain of the mount operation.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
</parameters>
<return> a string set to the domain. 
</return>
</function>

<function name="g_unix_mount_point_compare">
<description>
Compares two unix mount points.


</description>
<parameters>
<parameter name="mount1">
<parameter_description> a #GUnixMount.
</parameter_description>
</parameter>
<parameter name="mount2">
<parameter_description> a #GUnixMount.
</parameter_description>
</parameter>
</parameters>
<return> 1, 0 or -1 if @mount1 is greater than, equal to,
or less than @mount2, respectively.
</return>
</function>

<function name="g_drive_get_identifier">
<description>
Gets the identifier of the given kind for @drive.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive
</parameter_description>
</parameter>
<parameter name="kind">
<parameter_description> the kind of identifier to return
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string containing the
requested identfier, or %NULL if the #GDrive
doesn&apos;t have this kind of identifier
</return>
</function>

<function name="g_file_attribute_matcher_unref">
<description>
Unreferences @matcher. If the reference count falls below 1, 
the @matcher is automatically freed.


</description>
<parameters>
<parameter name="matcher">
<parameter_description> a #GFileAttributeMatcher.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_get_attribute_int32">
<description>
Gets a signed 32-bit integer contained within the attribute. If the 
attribute does not contain a signed 32-bit integer, or is invalid, 
0 will be returned.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> a signed 32-bit integer from the attribute.
</return>
</function>

<function name="g_file_set_attribute_uint32">
<description>
Sets @attribute of type %G_FILE_ATTRIBUTE_TYPE_UINT32 to @value. 
If @attribute is of a different type, this operation will fail.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a string containing the attribute&apos;s name.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #guint32 containing the attribute&apos;s new value.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @attribute was successfully set to @value 
in the @file, %FALSE otherwise.
</return>
</function>

<function name="g_unix_volume_monitor_new">
<description>

</description>
<parameters>
</parameters>
<return>  a new #GVolumeMonitor.
</return>
</function>

<function name="g_volume_get_mount">
<description>
Gets the mount for the @volume.


</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume.
</parameter_description>
</parameter>
</parameters>
<return> a #GMount or %NULL if @volume isn&apos;t mounted.
</return>
</function>

<function name="g_file_has_prefix">
<description>
Checks whether @file has the prefix specified by @prefix. In other word, if the
names of inital elements of @file&amp;lt;!-- --&amp;gt;s pathname match @prefix.

This call does no i/o, as it works purely on names. As such it can sometimes
return %FALSE even if @file is inside a @prefix (from a filesystem point of view),
because the prefix of @file is an alias of @prefix.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="prefix">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
</parameters>
<return>  %TRUE if the @files&apos;s parent, grandparent, etc is @prefix. %FALSE otherwise.
</return>
</function>

<function name="GUnixMountMonitor">
<description>
Emitted when the unix mount points have changed.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_mount_get_drive">
<description>
Gets the drive for the @mount.

This is a convenience method for getting the #GVolume and then
using that object to get the #GDrive.


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
</parameters>
<return> a #GDrive or %NULL if @mount is not associated with a volume or a drive.
</return>
</function>

<function name="g_drive_eject">
<description>
Ejects a drive.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the unmount if required for eject
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> a #gpointer.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_unix_mount_guess_should_display">
<description>
Guesses whether a Unix mount should be displayed in the UI.


</description>
<parameters>
<parameter name="mount_entry">
<parameter_description> a #GUnixMountEntry
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @mount_entry is deemed to be displayable.
</return>
</function>

<function name="g_volume_monitor_get_mount_for_uuid">
<description>
Finds a #GMount object by it&apos;s UUID (see g_mount_get_uuid())


</description>
<parameters>
<parameter name="volume_monitor">
<parameter_description> a #GVolumeMonitor.
</parameter_description>
</parameter>
<parameter name="uuid">
<parameter_description> the UUID to look for
</parameter_description>
</parameter>
</parameters>
<return> a #GMount or %NULL if no such mount is available.
</return>
</function>

<function name="g_local_file_input_stream_new">
<description>

</description>
<parameters>
<parameter name="fd">
<parameter_description> File Descriptor.
</parameter_description>
</parameter>
</parameters>
<return> #GFileInputStream for the given file descriptor.
</return>
</function>

<function name="g_filter_input_stream_get_base_stream">
<description>
Gets the base stream for the filter stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFilterInputStream.
</parameter_description>
</parameter>
</parameters>
<return> a #GInputStream.
</return>
</function>

<function name="g_file_equal">
<description>
Checks equality of two given #GFile&amp;lt;!-- --&amp;gt;s. Note that two
#GFile&amp;lt;!-- --&amp;gt;s that differ can still refer to the same
file on the filesystem due to various forms of filename
aliasing.

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file1">
<parameter_description> the first #GFile.
</parameter_description>
</parameter>
<parameter name="file2">
<parameter_description> the second #GFile.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @file1 and @file2 are equal.
%FALSE if either is not a #GFile.
</return>
</function>

<function name="g_file_set_attributes_async">
<description>
Asynchronously sets the attributes of @file with @info.

For more details, see g_file_set_attributes_from_info() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can then call
g_file_set_attributes_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &amp;lt;link linkend=&quot;io-priority&quot;&amp;gt;I/O priority&amp;lt;/link&amp;gt; 
of the request. 
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback. 
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> a #gpointer.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_simple_async_report_error_in_idle">
<description>
Reports an error in an asynchronous function in an idle function by 
directly setting the contents of the #GAsyncResult with the given error
information.

</description>
<parameters>
<parameter name="object">
<parameter_description> a #GObject.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback. 
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback.
</parameter_description>
</parameter>
<parameter name="domain">
<parameter_description> a #GQuark containing the error domain (usually #G_IO_ERROR).
</parameter_description>
</parameter>
<parameter name="code">
<parameter_description> a specific error code.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a formatted error reporting string.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of variables to fill in @format.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_unix_volume_new">
<description>

</description>
<parameters>
<parameter name="volume_monitor">
<parameter_description> a #GVolumeMonitor.
</parameter_description>
</parameter>
<parameter name="mountpoint">
<parameter_description> a #GUnixMountPoint.
</parameter_description>
</parameter>
</parameters>
<return> a #GUnixVolume for the given #GUnixMountPoint.
</return>
</function>

<function name="g_file_monitor_set_rate_limit">
<description>
Sets the rate limit to which the @monitor will report
consecutive change events to the same file. 


</description>
<parameters>
<parameter name="monitor">
<parameter_description> a #GFileMonitor.
</parameter_description>
</parameter>
<parameter name="limit_msecs">
<parameter_description> a integer with the limit in milliseconds to 
poll for changes.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cancellable_set_error_if_cancelled">
<description>
If the @cancelalble is cancelled, sets the error to notify
that the operation was cancelled.


</description>
<parameters>
<parameter name="cancellable">
<parameter_description> a #GCancellable object.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError to append error state to.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @cancellable was cancelled, %FALSE if it was not.
</return>
</function>

<function name="g_file_get_child">
<description>
Gets a child of @file with basename equal to @name.

Note that the file with that specific name might not exist, but
you can still have a #GFile that points to it. You can use this
for instance to create that file.

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> string containing the child&apos;s basename.
</parameter_description>
</parameter>
</parameters>
<return> a #GFile to a child specified by @name.
</return>
</function>

<function name="g_file_create_finish">
<description>
Finishes an asynchronous file create operation started with 
g_file_create_async(). 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFileOutputStream or %NULL on error.
</return>
</function>

<function name="g_output_stream_close_async">
<description>
Requests an asynchronous close of the stream, releasing resources 
related to it. When the operation is finished @callback will be 
called. You can then call g_output_stream_close_finish() to get 
the result of the operation.

For behaviour details see g_output_stream_close().

The asyncronous methods have a default fallback that uses threads 
to implement asynchronicity, so they are optional for inheriting 
classes. However, if you override one you must override all.

</description>
<parameters>
<parameter name="stream">
<parameter_description> A #GOutputStream.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the io priority of the request.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional cancellable object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mount_operation_get_password_save">
<description>
Gets the state of saving passwords for the mount operation.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
</parameters>
<return> a #GPasswordSave flag. 
</return>
</function>

<function name="g_buffered_input_stream_new">
<description>
Creates a new #GInputStream from the given @base_stream, with 
a buffer set to the default size (4 kilobytes).


</description>
<parameters>
<parameter name="base_stream">
<parameter_description> a #GInputStream.
</parameter_description>
</parameter>
</parameters>
<return> a #GInputStream for the given @base_stream.
</return>
</function>

<function name="g_content_type_guess">
<description>
Guesses the content type based on example data. If the function is 
uncertain, @result_uncertain will be set to %TRUE.


</description>
<parameters>
<parameter name="filename">
<parameter_description> a string.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a stream of data.
</parameter_description>
</parameter>
<parameter name="data_size">
<parameter_description> the size of @data.
</parameter_description>
</parameter>
<parameter name="result_uncertain">
<parameter_description> a flag indicating the certainty of the 
result.
</parameter_description>
</parameter>
</parameters>
<return> a string indicating a guessed content type for the 
given data. 
</return>
</function>

<function name="g_simple_async_result_set_error_va">
<description>
Sets an error within the asynchronous result without a #GError. 
Unless writing a binding, see g_simple_async_result_set_error().

</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
<parameter name="domain">
<parameter_description> a #GQuark (usually #G_IO_ERROR).
</parameter_description>
</parameter>
<parameter name="code">
<parameter_description> an error code.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a formatted error reporting string.
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> va_list of arguments. 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_enumerator_has_pending">
<description>
Checks if the file enumerator has pending operations.


</description>
<parameters>
<parameter name="enumerator">
<parameter_description> a #GFileEnumerator.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @enumerator has pending operations.
</return>
</function>

<function name="g_file_new_for_uri">
<description>
Constructs a #GFile for a given URI. This operation never 
fails, but the returned object might not support any I/O 
operation if @uri is malformed or if the uri type is 
not supported.


</description>
<parameters>
<parameter name="uri">
<parameter_description> a string containing a URI.
</parameter_description>
</parameter>
</parameters>
<return> a #GFile for the given @uri.
</return>
</function>

<function name="g_file_query_writable_namespaces">
<description>
Obtain the list of attribute namespaces where new attributes 
can be created by a user. An example of this is extended
attributes (in the &quot;xattr&quot; namespace).

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFileAttributeInfoList describing the writable namespaces.
When you are done with it, release it with g_file_attribute_info_list_unref()
</return>
</function>

<function name="Adds">
<description>

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="SECTION">
<description>
#GIcon is a very minimal interface for icons. It provides functions 
for checking the equality of two icons and hashing of icons.

#GIcon does not provide the actual pixmap for the icon as this is out 
of GIO&apos;s scope, however implementations of #GIcon may contain the name 
of an icon (see #GThemedIcon), or the path to an icon (see #GLoadableIcon). 

To obtain a hash of a #GIcon, see g_icon_hash().

To check if two #GIcons are equal, see g_icon_equal().

</description>
<parameters>
<parameter name="short_description">
<parameter_description> Interface for icons
</parameter_description>
</parameter>
<parameter name="include">
<parameter_description> gio/gio.h
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_g_local_directory_monitor_new">
<description>

</description>
<parameters>
<parameter name="dirname">
<parameter_description> filename of the directory to monitor.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> #GFileMonitorFlags.
</parameter_description>
</parameter>
</parameters>
<return> new #GFileMonitor for the given @dirname.
</return>
</function>

<function name="GVolumeMonitor">
<description>
Emitted when a drive changes.

</description>
<parameters>
<parameter name="volume_monitor">
<parameter_description> The volume monitor emitting the signal.
</parameter_description>
</parameter>
<parameter name="drive">
<parameter_description> the drive that changed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mount_operation_get_choice">
<description>
Gets a choice from the mount operation.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
</parameters>
<return> an integer containing an index of the user&apos;s choice from 
the choice&apos;s list, or %0.
</return>
</function>

<function name="g_io_scheduler_cancel_all_jobs">
<description>
Cancels all cancellable I/O jobs. 

A job is cancellable if a #GCancellable was passed into
g_io_scheduler_push_job().

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_drive_poll_for_media">
<description>
Polls @drive to see if media has been inserted or removed.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> a #gpointer.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_trash">
<description>
Sends @file to the &quot;Trashcan&quot;, if possible. This is similar to
deleting it, but the user can recover it before emptying the trashcan.
Not all file systems support trashing, so this call can return the
%G_IO_ERROR_NOT_SUPPORTED error.


If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> #GFile to send to trash.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on successful trash, %FALSE otherwise.
</return>
</function>

<function name="g_unix_mounts_get">
<description>
Gets a #GList of strings containing the unix mounts. 
If @time_read is set, it will be filled with the mount 
timestamp, allowing for checking if the mounts have changed 
with g_unix_mounts_changed_since().


</description>
<parameters>
<parameter name="time_read">
<parameter_description> guint64 to contain a timestamp.
</parameter_description>
</parameter>
</parameters>
<return> a #GList of the UNIX mounts. 
</return>
</function>

<function name="g_simple_async_result_set_handle_cancellation">
<description>
Sets whether to handle cancellation within the asynchronous operation.


</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
<parameter name="handle_cancellation">
<parameter_description> a #gboolean.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_get_parent">
<description>
Gets the parent directory for the @file. 
If the @file represents the root directory of the 
file system, then %NULL will be returned.

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
</parameters>
<return> a #GFile structure to the parent of the given
#GFile or %NULL if there is no parent. 
</return>
</function>

<function name="g_file_monitor_is_cancelled">
<description>
Returns: %TRUE if monitor is canceled. %FALSE otherwise.

</description>
<parameters>
<parameter name="monitor">
<parameter_description> a #GFileMonitor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if monitor is canceled. %FALSE otherwise.
</return>
</function>

<function name="g_file_set_attributes_from_info">
<description>
Tries to set all attributes in the #GFileInfo on the target values, 
not stopping on the first error.

If there is any error during this operation then @error will be set to
the first error. Error on particular fields are flagged by setting 
the &quot;status&quot; field in the attribute value to 
%G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING, which means you can also detect
further errors.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> #GFileQueryInfoFlags
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL 
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there was any error, %FALSE otherwise.
</return>
</function>

<function name="g_file_create_async">
<description>
Asynchronously creates a new file and returns an output stream for writing to it.
The file must not already exists.

For more details, see g_file_create() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can then call
g_file_create_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileCreateFlags.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &amp;lt;link linkend=&quot;io-priority&quot;&amp;gt;I/O priority&amp;lt;/link&amp;gt; 
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_data_output_stream_put_uint32">
<description>
Puts an unsigned 32-bit integer into the stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataOutputStream.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a #guint32.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @data was successfully added to the @stream.
</return>
</function>

<function name="g_file_attribute_matcher_matches_only">
<description>
Checks if a attribute matcher only matches a given attribute. Always
Returns: %TRUE if the matcher only matches @attribute. %FALSE otherwise.

</description>
<parameters>
<parameter name="matcher">
<parameter_description> a #GFileAttributeMatcher.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the matcher only matches @attribute. %FALSE otherwise.
</return>
</function>

<function name="g_file_get_relative_path">
<description>
Gets the path for @descendant relative to @parent. 

This call does no blocking i/o.


</description>
<parameters>
<parameter name="parent">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="descendant">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
</parameters>
<return> string with the relative path from @descendant 
to @parent, or %NULL if @descendant doesn&apos;t have @parent as prefix. The returned string should be freed with 
g_free() when no longer needed.
</return>
</function>

<function name="g_app_info_get_name">
<description>
Gets the installed name of the application. 


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
</parameters>
<return> the name of the application for @appinfo.
</return>
</function>

<function name="g_unix_is_mount_path_system_internal">
<description>
Determines if @mount_path is considered an implementation of the
OS. This is primarily used for hiding mountable and mounted volumes
that only are used in the OS and has little to no relevance to the
casual user.


</description>
<parameters>
<parameter name="mount_path">
<parameter_description> a mount path, e.g. &amp;lt;filename&amp;gt;/media/disk&amp;lt;/filename&amp;gt; 
or &amp;lt;filename&amp;gt;/usr&amp;lt;/filename&amp;gt;
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @mount_path is considered an implementation detail 
of the OS.
</return>
</function>

<function name="g_file_info_get_etag">
<description>
Gets the &amp;lt;link linkend=&quot;gfile-etag&quot;&amp;gt;entity tag&amp;lt;/link&amp;gt; for a given 
#GFileInfo. See %G_FILE_ATTRIBUTE_ETAG_VALUE.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the value of the &quot;etag:value&quot; attribute.
</return>
</function>

<function name="g_volume_mount_finish">
<description>
Finishes mounting a volume.


</description>
<parameters>
<parameter name="volume">
<parameter_description> pointer to a #GVolume.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, %FALSE if operation failed.
</return>
</function>

<function name="g_app_info_get_icon">
<description>
Gets the icon for the application.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
</parameters>
<return> the default #GIcon for @appinfo.
</return>
</function>

<function name="g_file_parse_name">
<description>
Constructs a #GFile with the given @parse_name (i.e. something given by g_file_get_parse_name()).
This operation never fails, but the returned object might not support any I/O
operation if the @parse_name cannot be parsed.


</description>
<parameters>
<parameter name="parse_name">
<parameter_description> a file name or path to be parsed.
</parameter_description>
</parameter>
</parameters>
<return> a new #GFile.
</return>
</function>

<function name="g_volume_monitor_get_connected_drives">
<description>
Gets a list of drives connected to the system.

The returned list should be freed with g_list_free(), after
its elements have been unreffed with g_object_unref().


</description>
<parameters>
<parameter name="volume_monitor">
<parameter_description> a #GVolumeMonitor.
</parameter_description>
</parameter>
</parameters>
<return> a #GList of connected #GDrive&amp;lt;!-- --&amp;gt;s
</return>
</function>

<function name="g_local_vfs_new">
<description>
Returns: a new #GVfs handle.

</description>
<parameters>
</parameters>
<return> a new #GVfs handle.
</return>
</function>

<function name="g_volume_eject">
<description>
Ejects a volume.

</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the unmount if required for eject
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> a #gpointer.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_unix_mount_point_get_mount_path">
<description>
Gets the mount path for a unix mount point.


</description>
<parameters>
<parameter name="mount_point">
<parameter_description> a #GUnixMountPoint.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the mount path.
</return>
</function>

<function name="g_output_stream_has_pending">
<description>
Checks if an ouput stream has pending actions.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @stream has pending actions. 
</return>
</function>

<function name="g_filter_output_stream_get_base_stream">
<description>
Gets the base stream for the filter stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFilterOutputStream.
</parameter_description>
</parameter>
</parameters>
<return> a #GOutputStream.
</return>
</function>

<function name="g_unix_mount_compare">
<description>
Compares two unix mounts.


</description>
<parameters>
<parameter name="mount1">
<parameter_description> first #GUnixMountEntry to compare.
</parameter_description>
</parameter>
<parameter name="mount2">
<parameter_description> second #GUnixMountEntry to compare.
</parameter_description>
</parameter>
</parameters>
<return> 1, 0 or -1 if @mount1 is greater than, equal to,
or less than @mount2, respectively. 
</return>
</function>

<function name="g_vfs_get_local">
<description>
Gets the local #GVfs for the system.


</description>
<parameters>
</parameters>
<return> a #GVfs.
</return>
</function>

<function name="g_file_is_native">
<description>
Checks to see if a file is native to the platform.

A native file s one expressed in the platform-native filename format,
e.g. &quot;C:\Windows&quot; or &quot;/usr/bin/&quot;. This does not mean the file is local,
as it might be on a locally mounted remote filesystem.

On some systems non-native files may be available using
the native filesystem via a userspace filesystem (FUSE), in
these cases this call will return %FALSE, but g_file_get_path()
will still return a native path.

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if file is native. 
</return>
</function>

<function name="g_file_set_attribute_uint64">
<description>
Sets @attribute of type %G_FILE_ATTRIBUTE_TYPE_UINT64 to @value. 
If @attribute is of a different type, this operation will fail.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile. 
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a string containing the attribute&apos;s name.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #guint64 containing the attribute&apos;s new value.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @attribute was successfully set to @value 
in the @file, %FALSE otherwise.
</return>
</function>

<function name="g_output_stream_flush_finish">
<description>
Finishes flushing an output stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if flush operation suceeded, %FALSE otherwise.
</return>
</function>

<function name="g_drive_is_media_removable">
<description>
Checks if the @drive supports removable media.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @drive supports removable media, %FALSE otherwise.
</return>
</function>

<function name="g_volume_get_icon">
<description>
Gets the icon for @volume.


</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume.
</parameter_description>
</parameter>
</parameters>
<return> a #GIcon.
</return>
</function>

<function name="g_file_info_get_attribute_data">
<description>
Gets the attribute type, value and status for an attribute key.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> return location for the attribute type, or %NULL
</parameter_description>
</parameter>
<parameter name="value_pp">
<parameter_description> return location for the attribute value, or %NULL
</parameter_description>
</parameter>
<parameter name="status">
<parameter_description> return location for the attribute status, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @info has an attribute named @attribute, 
%FALSE otherwise.
</return>
</function>

<function name="g_seekable_can_truncate">
<description>
Tests if the stream can be truncated.


</description>
<parameters>
<parameter name="seekable">
<parameter_description> a #GSeekable.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the stream can be truncated, %FALSE otherwise.
</return>
</function>

<function name="g_output_stream_splice_async">
<description>
Splices a stream asynchronously.
When the operation is finished @callback will be called.
You can then call g_output_stream_splice_finish() to get the 
result of the operation.

For the synchronous, blocking version of this function, see 
g_output_stream_splice().

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="source">
<parameter_description> a #GInputStream. 
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GOutputStreamSpliceFlags.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the io priority of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback. 
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GDataStream">
<description>
The :newline-type property determines what is considered
as a line ending when reading complete lines from the stream.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_data_output_stream_put_byte">
<description>
Puts a byte into the output stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataOutputStream.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a #guchar.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @data was successfully added to the @stream.
</return>
</function>

<function name="g_unix_mounts_changed_since">
<description>
Checks if the unix mounts have changed since a given unix time.


</description>
<parameters>
<parameter name="time">
<parameter_description> guint64 to contain a timestamp.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the mounts have changed since @time. 
</return>
</function>

<function name="g_output_stream_flush">
<description>
Flushed any outstanding buffers in the stream. Will block during 
the operation. Closing the stream will implicitly cause a flush.

This function is optional for inherited classes.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional cancellable object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on error
</return>
</function>

<function name="g_file_info_get_attribute_int64">
<description>
Gets a signed 64-bit integer contained within the attribute. If the 
attribute does not contain an signed 64-bit integer, or is invalid, 
0 will be returned.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> a signed 64-bit integer from the attribute. 
</return>
</function>

<function name="g_io_extension_get_name">
<description>
Gets the name under which @extension was registered.

Note that the same type may be registered as extension
for multiple extension points, under different names.


</description>
<parameters>
<parameter name="extension">
<parameter_description> a #GIOExtension
</parameter_description>
</parameter>
</parameters>
<return> the name of @extension.
</return>
</function>

<function name="g_seekable_truncate">
<description>
Truncates a stream with a given #offset. 

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
operation was partially finished when the operation was cancelled the
partial result will be returned, without an error.


</description>
<parameters>
<parameter name="seekable">
<parameter_description> a #GSeekable.
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> a #goffset.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful. If an error
has occurred, this function will return %FALSE and set @error
appropriately if present. 
</return>
</function>

<function name="g_buffered_input_stream_read_byte">
<description>
Tries to read a single byte from the stream or the buffer. Will block
during this read.

On success, the byte read from the stream is returned. On end of stream
-1 is returned but it&apos;s not an exceptional error and @error is not set.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
operation was partially finished when the operation was cancelled the
partial result will be returned, without an error.

On error -1 is returned and @error is set accordingly.


</description>
<parameters>
<parameter name="stream">
<parameter_description> #GBufferedInputStream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> the byte read from the @stream, or -1 on end of stream or error.
</return>
</function>

<function name="g_drive_eject_finish">
<description>
Finishes ejecting a drive.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the drive has been ejected successfully,
%FALSE otherwise.
</return>
</function>

<function name="g_file_read_async">
<description>
Asynchronously opens @file for reading.

For more details, see g_file_read() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can then call
g_file_read_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &amp;lt;link linkend=&quot;io-priority&quot;&amp;gt;I/O priority&amp;lt;/link&amp;gt; 
of the request. 
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_buffered_input_stream_get_buffer_size">
<description>
Gets the size of the input buffer.


</description>
<parameters>
<parameter name="stream">
<parameter_description> #GBufferedInputStream.
</parameter_description>
</parameter>
</parameters>
<return> the current buffer size.
</return>
</function>

<function name="g_file_load_partial_contents_async">
<description>
Reads the partial contents of a file. A #GFileReadMoreCallback should be 
used to stop reading from the file when appropriate, else this function
will behave exactly as g_file_load_contents_async(). This operation 
can be finished by g_file_load_partial_contents_finish().

Users of this function should be aware that @user_data is passed to 
both the @read_more_callback and the @callback.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="read_more_callback">
<parameter_description> a #GFileReadMoreCallback to receive partial data and to specify whether further data should be read.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to the callback functions.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_output_stream_splice_finish">
<description>
Finishes an asynchronous stream splice operation.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #gssize of the number of bytes spliced.
</return>
</function>

<function name="_g_mount_get_for_mount_path">
<description>

</description>
<parameters>
<parameter name="mountpoint">
<parameter_description> a string.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GMount for given @mount_path or %NULL.  
</return>
</function>

<function name="g_filename_completer_get_completion_suffix">
<description>
Obtains a completion for @initial_text from @completer.


</description>
<parameters>
<parameter name="completer">
<parameter_description> the filename completer.
</parameter_description>
</parameter>
<parameter name="initial_text">
<parameter_description> text to be completed.
</parameter_description>
</parameter>
</parameters>
<return> a completed string, or %NULL if no completion exists. 
This string is not owned by GIO, so remember to g_free() it 
when finished.
</return>
</function>

<function name="g_file_icon_new">
<description>
Creates a new icon for a file.


</description>
<parameters>
<parameter name="file">
<parameter_description> a #GFile.
</parameter_description>
</parameter>
</parameters>
<return> a #GIcon for the given @file, or %NULL on error.
</return>
</function>

<function name="g_vfs_get_file_for_uri">
<description>
Gets a #GFile for @uri.

This operation never fails, but the returned object
might not support any I/O operation if the uri
is malformed or if the uri type is not supported.


</description>
<parameters>
<parameter name="vfs">
<parameter_description> a#GVfs.
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a string containing a URI path.
</parameter_description>
</parameter>
</parameters>
<return> a #GFile. 

</return>
</function>

<function name="g_app_info_get_default_for_uri_scheme">
<description>
Gets the default application for launching applications 
using this URI scheme. A URI scheme is the initial part 
of the URI, up to but not including the &apos;:&apos;, e.g. &quot;http&quot;, 
&quot;ftp&quot; or &quot;sip&quot;.


</description>
<parameters>
<parameter name="uri_scheme">
<parameter_description> a string containing a URI scheme.
</parameter_description>
</parameter>
</parameters>
<return> #GAppInfo for given @uri_scheme or %NULL on error.
</return>
</function>

<function name="g_vfs_get_file_for_path">
<description>
Gets a #GFile for @path.


</description>
<parameters>
<parameter name="vfs">
<parameter_description> a #GVfs.
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a string containing a VFS path.
</parameter_description>
</parameter>
</parameters>
<return> a #GFile.
</return>
</function>

<function name="g_file_set_attributes_finish">
<description>
Finishes setting an attribute started in g_file_set_attributes_async().


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the attributes were set correctly, %FALSE otherwise.
</return>
</function>

<function name="g_file_unmount_mountable">
<description>
Unmounts a file of type G_FILE_TYPE_MOUNTABLE.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.

When the operation is finished, @callback will be called. You can then call
g_file_unmount_mountable_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the operation
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_unix_mount_point_guess_name">
<description>
Guesses the name of a Unix mount point. 
The result is a translated string.


</description>
<parameters>
<parameter name="mount_point">
<parameter_description> a #GUnixMountPoint
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated string that must 
be freed with g_free()
</return>
</function>

<function name="g_unix_mount_point_guess_can_eject">
<description>
Guesses whether a Unix mount point can be ejected.


</description>
<parameters>
<parameter name="mount_point">
<parameter_description> a #GUnixMountPoint
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @mount_point is deemed to be ejectable.
</return>
</function>

<function name="g_simple_async_result_complete">
<description>
Completes an asynchronous I/O job.

</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_drive_get_icon">
<description>
Gets the icon for @drive.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
</parameters>
<return> #GIcon for the @drive.
</return>
</function>

<function name="g_file_enumerate_children_finish">
<description>
Finishes an async enumerate children operation.
See g_file_enumerate_children_async().


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError.
</parameter_description>
</parameter>
</parameters>
<return> a #GFileEnumerator or %NULL if an error occurred.
</return>
</function>

<function name="g_unix_mount_free">
<description>
Frees a unix mount.

</description>
<parameters>
<parameter name="mount_entry">
<parameter_description> a #GUnixMount.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_input_stream_has_pending">
<description>
Checks if an input stream has pending actions.


</description>
<parameters>
<parameter name="stream">
<parameter_description> input stream.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @stream has pending actions.
</return>
</function>

<function name="g_themed_icon_append_name">
<description>
Append a name to the list of icons from within @icon.

</description>
<parameters>
<parameter name="icon">
<parameter_description> a #GThemedIcon
</parameter_description>
</parameter>
<parameter name="iconname">
<parameter_description> name of icon to append to list of icons from within @icon.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_get_attribute_byte_string">
<description>
Gets the value of a byte string attribute. If the attribute does 
not contain a byte string, %NULL will be returned.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> the contents of the @attribute value as a byte string, or 
%NULL otherwise.
</return>
</function>

<function name="g_buffered_output_stream_new_sized">
<description>
Creates a new buffered output stream with a given buffer size.


</description>
<parameters>
<parameter name="base_stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> a #gsize.
</parameter_description>
</parameter>
</parameters>
<return> a #GOutputStream with an internal buffer set to @size.
</return>
</function>

<function name="g_data_input_stream_read_uint64">
<description>
Reads an unsigned 64-bit/8-byte value from @stream.

In order to get the correct byte order for this read operation, 
see g_data_stream_get_byte_order().

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting.
</parameter_description>
</parameter>
</parameters>
<return> an unsigned 64-bit/8-byte read from @stream or %0 if 
an error occurred. 
</return>
</function>

<function name="g_unix_volume_unset_mount">
<description>

</description>
<parameters>
<parameter name="volume">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="mount">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_data_output_stream_put_uint64">
<description>
Puts an unsigned 64-bit integer into the stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataOutputStream.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a #guint64.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @data was successfully added to the @stream.
</return>
</function>

<function name="g_file_hash">
<description>
Creates a hash value for a #GFile.

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> #gconstpointer to a #GFile.
</parameter_description>
</parameter>
</parameters>
<return> 0 if @file is not a valid #GFile, otherwise an 
integer that can be used as hash value for the #GFile. 
This function is intended for easily hashing a #GFile to 
add to a #GHashTable or similar data structure.
</return>
</function>

<function name="_ih_startup">
<description>
Initializes the inotify backend.  This must be called before
any other functions in this module.


</description>
<parameters>
</parameters>
<return> #TRUE if initialization succeeded, #FALSE otherwise
</return>
</function>

<function name="g_file_output_stream_query_info">
<description>
Queries a file output stream for the given @attributes. 
This function blocks while querying the stream. For the asynchronous 
version of this function, see g_file_output_stream_query_info_async(). 
While the stream is blocked, the stream will set the pending flag 
internally, and any other operations on the stream will fail with 
%G_IO_ERROR_PENDING.

Can fail if the stream was already closed (with @error being set to 
%G_IO_ERROR_CLOSED), the stream has pending operations (with @error being
set to %G_IO_ERROR_PENDING), or if querying info is not supported for 
the stream&apos;s interface (with @error being set to %G_IO_ERROR_NOT_SUPPORTED). In
all cases of failure, %NULL will be returned.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be set, and %NULL will 
be returned. 


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFileOutputStream.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description> a file attribute query string.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GFileInfo for the @stream, or %NULL on error.
</return>
</function>

<function name="g_io_extension_get_type">
<description>
Gets the type associated with @extension.


</description>
<parameters>
<parameter name="extension">
<parameter_description> a #GIOExtension
</parameter_description>
</parameter>
</parameters>
<return> the type of @extension
</return>
</function>

<function name="g_cancellable_get_current">
<description>
Gets the top cancellable from the stack.


</description>
<parameters>
</parameters>
<return> a #GCancellable from the top of the stack, or %NULL
if the stack is empty. 
</return>
</function>

<function name="g_file_copy">
<description>
Copies the file @source to the location specified by @destination.
Can not handle recursive copies of directories.

If the flag #G_FILE_COPY_OVERWRITE is specified an already
existing @destination file is overwritten.

If the flag #G_FILE_COPY_NOFOLLOW_SYMLINKS is specified then symlinks
will be copied as symlinks, otherwise the target of the
@source symlink will be copied.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

If @progress_callback is not %NULL, then the operation can be monitored by
setting this to a #GFileProgressCallback function. @progress_callback_data
will be passed to this function. It is guaranteed that this callback will
be called after all data has been transferred with the total number of bytes
copied during the operation.

If the @source file does not exist then the G_IO_ERROR_NOT_FOUND
error is returned, independent on the status of the @destination.

If #G_FILE_COPY_OVERWRITE is not specified and the target exists, then the
error G_IO_ERROR_EXISTS is returned.

If trying to overwrite a file over a directory the G_IO_ERROR_IS_DIRECTORY
error is returned. If trying to overwrite a directory with a directory the
G_IO_ERROR_WOULD_MERGE error is returned.

If the source is a directory and the target does not exist, or #G_FILE_COPY_OVERWRITE is
specified and the target is a file, then the G_IO_ERROR_WOULD_RECURSE error
is returned.

If you are interested in copying the #GFile object itself (not the on-disk
file), see g_file_dup().


</description>
<parameters>
<parameter name="source">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="destination">
<parameter_description> destination #GFile
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> set of #GFileCopyFlags
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="progress_callback">
<parameter_description> function to callback with progress information
</parameter_description>
</parameter>
<parameter name="progress_callback_data">
<parameter_description> user data to pass to @progress_callback
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError to set on error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE otherwise.
</return>
</function>

<function name="g_data_output_stream_put_int32">
<description>
Puts a signed 32-bit integer into the output stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataOutputStream.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a #gint32.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @data was successfully added to the @stream.
</return>
</function>

<function name="g_data_input_stream_get_byte_order">
<description>
Gets the byte order for the data input stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
</parameters>
<return> the @stream&apos;s current #GDataStreamByteOrder. 
</return>
</function>

<function name="g_file_set_attribute_int64">
<description>
Sets @attribute of type %G_FILE_ATTRIBUTE_TYPE_INT64 to @value. 
If @attribute is of a different type, this operation will fail.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a string containing the attribute&apos;s name.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #guint64 containing the attribute&apos;s new value.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @attribute was successfully set, %FALSE otherwise.
</return>
</function>

<function name="g_filename_completer_set_dirs_only">
<description>
If @dirs_only is %TRUE, @completer will only 
complete directory names, and not file names.

</description>
<parameters>
<parameter name="completer">
<parameter_description> the filename completer.
</parameter_description>
</parameter>
<parameter name="dirs_only">
<parameter_description> a #gboolean.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_enumerator_next_files_finish">
<description>
Finishes the asynchronous operation started with g_file_enumerator_next_files_async().


</description>
<parameters>
<parameter name="enumerator">
<parameter_description> a #GFileEnumerator.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GList of #GFileInfo&amp;lt;!----&amp;gt;s. You must free the list with g_list_free
and unref the infos with g_object_unref when your done with them.
</return>
</function>

<function name="g_simple_async_report_gerror_in_idle">
<description>
Reports an error in an idle function. Similar to 
g_simple_async_report_error_in_idle(), but takes a #GError rather 
than building a new one.

</description>
<parameters>
<parameter name="object">
<parameter_description> a #GObject.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback. 
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> the #GError to report
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_drive_get_name">
<description>
Gets the name of @drive.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
</parameters>
<return> a string containing @drive&apos;s name. The returned 
string should be freed when no longer needed.
</return>
</function>

<function name="g_volume_monitor_get_mounts">
<description>
Gets a list of the mounts on the system.

The returned list should be freed with g_list_free(), after
its elements have been unreffed with g_object_unref().


</description>
<parameters>
<parameter name="volume_monitor">
<parameter_description> a #GVolumeMonitor.
</parameter_description>
</parameter>
</parameters>
<return> a #GList of #GMount&amp;lt;!-- --&amp;gt;s
</return>
</function>

<function name="g_buffered_output_stream_set_auto_grow">
<description>
Sets whether or not the @stream&apos;s buffer should automatically grow.
If @auto_grow is true, then each write will just make the buffer
larger, and you must manually flush the buffer to actually write out
the data to the underlying stream.

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GBufferedOutputStream.
</parameter_description>
</parameter>
<parameter name="auto_grow">
<parameter_description> a #gboolean.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_memory_output_stream_get_size">
<description>
Gets the size of the loaded data from the @ostream.

Note that the returned size may become invalid on the next
write or truncate operation on the stream.


</description>
<parameters>
<parameter name="ostream">
<parameter_description> a #GMemoryOutputStream
</parameter_description>
</parameter>
</parameters>
<return> the size of the stream&apos;s data
</return>
</function>

<function name="g_unix_mount_is_system_internal">
<description>
Checks if a unix mount is a system path.


</description>
<parameters>
<parameter name="mount_entry">
<parameter_description> a #GUnixMount.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the unix mount is for a system path.
</return>
</function>

<function name="g_file_info_get_content_type">
<description>
Gets the file&apos;s content type.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the file&apos;s content type.s
</return>
</function>

<function name="g_file_info_copy_into">
<description>
Copies all of the #GFileAttribute&amp;lt;!-- --&amp;gt;s from @src_info to @dest_info.

</description>
<parameters>
<parameter name="src_info">
<parameter_description> source to copy attributes from.
</parameter_description>
</parameter>
<parameter name="dest_info">
<parameter_description> destination to copy attributes to.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_simple_async_result_set_error">
<description>
Sets an error within the asynchronous result without a #GError.

</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
<parameter name="domain">
<parameter_description> a #GQuark (usually #G_IO_ERROR).
</parameter_description>
</parameter>
<parameter name="code">
<parameter_description> an error code.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a formatted error reporting string.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of variables to fill in @format.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_unix_mount_point_get_device_path">
<description>
Gets the device path for a unix mount point.


</description>
<parameters>
<parameter name="mount_point">
<parameter_description> a #GUnixMountPoint.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the device path.
</return>
</function>

<function name="g_file_info_set_modification_time">
<description>
Sets the %G_FILE_ATTRIBUTE_TIME_MODIFIED attribute in the file
info to the given time value.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="mtime">
<parameter_description> a #GTimeVal.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_remove_attribute">
<description>
Removes all cases of @attribute from @info if it exists.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_data_input_stream_new">
<description>
Creates a new data input stream for the @base_stream.


</description>
<parameters>
<parameter name="base_stream">
<parameter_description> a #GInputStream.
</parameter_description>
</parameter>
</parameters>
<return> a new #GDataInputStream.
</return>
</function>

<function name="g_app_info_get_executable">
<description>
Gets the executable&apos;s name for the installed application.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the @appinfo&apos;s application 
binary&apos;s name.
</return>
</function>

<function name="g_file_info_get_attribute_string">
<description>
Gets the value of a string attribute. If the attribute does 
not contain a string, %NULL will be returned.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> the contents of the @attribute value as a string, or 
%NULL otherwise.
</return>
</function>

<function name="g_content_type_equals">
<description>
Compares two content types for equality.


</description>
<parameters>
<parameter name="type1">
<parameter_description> a content type string.
</parameter_description>
</parameter>
<parameter name="type2">
<parameter_description> a content type string.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the two strings are identical or equivalent,
%FALSE otherwise.
</return>
</function>

<function name="g_file_info_set_size">
<description>
Sets the %G_FILE_ATTRIBUTE_STANDARD_SIZE attribute in the file info 
to the given size.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> a #goffset containing the file&apos;s size.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_eject_mountable_finish">
<description>
Finishes an asynchronous eject operation started by 
g_file_eject_mountable().


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @file was ejected successfully. %FALSE 
otherwise.
</return>
</function>

<function name="g_file_find_enclosing_mount">
<description>
Gets a #GMount for the #GFile. 

If the #GFileIface for @file does not have a mount (e.g. possibly a 
remote share), @error will be set to %G_IO_ERROR_NOT_FOUND and %NULL
will be returned.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError. 
</parameter_description>
</parameter>
</parameters>
<return> a #GMount where the @file is located or %NULL on error.
</return>
</function>

<function name="g_app_info_set_as_default_for_extension">
<description>
Sets the application as the default handler for the given file extention.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
<parameter name="extension">
<parameter_description> a string containing the file extension (without the dot).
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on error.
</return>
</function>

<function name="g_input_stream_read_all">
<description>
Tries to read @count bytes from the stream into the buffer starting at
@buffer. Will block during this read.

This function is similar to g_input_stream_read(), except it tries to
read as many bytes as requested, only stopping on an error or end of stream.

On a successful read of @count bytes, or if we reached the end of the
stream,  %TRUE is returned, and @bytes_read is set to the number of bytes
read into @buffer.

If there is an error during the operation %FALSE is returned and @error
is set to indicate the error status, @bytes_read is updated to contain
the number of bytes read into @buffer before the error occurred.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GInputStream.
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a buffer to read data into (which should be at least count bytes long).
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> the number of bytes that will be read from the stream
</parameter_description>
</parameter>
<parameter name="bytes_read">
<parameter_description> location to store the number of bytes that was read from the stream
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE if there was an error
</return>
</function>

<function name="g_input_stream_close_finish">
<description>
Finishes closing a stream asynchronously, started from g_input_stream_close_async().


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GInputStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the stream was closed successfully.
</return>
</function>

<function name="g_local_file_monitor_new">
<description>

</description>
<parameters>
<parameter name="pathname">
<parameter_description> path name to monitor.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> #GFileMonitorFlags.
</parameter_description>
</parameter>
</parameters>
<return> a new #GFileMonitor for the given @pathname. 
</return>
</function>

<function name="g_mount_get_volume">
<description>
Gets the volume for the @mount.


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
</parameters>
<return> a #GVolume or %NULL if @mount is not associated with a volume.
</return>
</function>

<function name="g_content_type_is_unknown">
<description>
Checks if the content type is the generic &quot;unknown&quot; type.
On unix this is the &quot;application/octet-stream&quot; mimetype,
while on win32 it is &quot;*&quot;.


</description>
<parameters>
<parameter name="type">
<parameter_description> a content type string. 
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the type is the unknown type.
</return>
</function>

<function name="g_cancellable_pop_current">
<description>
Pops @cancellable off the cancellable stack (verifying that @cancellable 
is on the top of the stack).

</description>
<parameters>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_async_result_get_source_object">
<description>
Gets the source object from a #GAsyncResult.


</description>
<parameters>
<parameter name="res">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
</parameters>
<return> the source object for the @res.
</return>
</function>

<function name="g_file_replace_async">
<description>
Asynchronously overwrites the file, replacing the contents, possibly
creating a backup copy of the file first.

For more details, see g_file_replace() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can then call
g_file_replace_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="etag">
<parameter_description> an &amp;lt;link linkend=&quot;gfile-etag&quot;&amp;gt;entity tag&amp;lt;/link&amp;gt; for the 
current #GFile, or NULL to ignore.
</parameter_description>
</parameter>
<parameter name="make_backup">
<parameter_description> %TRUE if a backup should be created.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileCreateFlags.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &amp;lt;link linkend=&quot;io-priority&quot;&amp;gt;I/O priority&amp;lt;/link&amp;gt; 
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_data_output_stream_set_byte_order">
<description>
Sets the byte order of the data output stream to @order.

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataOutputStream.
</parameter_description>
</parameter>
<parameter name="order">
<parameter_description> a %GDataStreamByteOrder.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_list_attributes">
<description>
Lists the file info structure&apos;s attributes.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="name_space">
<parameter_description> a file attribute key&apos;s namespace.
</parameter_description>
</parameter>
</parameters>
<return> a null-terminated array of strings of all of the 
possible attribute types for the given @name_space, or 
%NULL on error.
</return>
</function>

<function name="g_mount_operation_set_choice">
<description>
Sets a default choice for the mount operation.

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
<parameter name="choice">
<parameter_description> an integer.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_data_input_stream_read_int64">
<description>
Reads a 64-bit/8-byte value from @stream.

In order to get the correct byte order for this read operation, 
see g_data_stream_get_byte_order() and g_data_stream_set_byte_order().

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting.
</parameter_description>
</parameter>
</parameters>
<return> a signed 64-bit/8-byte value read from @stream or %0 if 
an error occurred.  
</return>
</function>

<function name="g_poll_file_monitor_new">
<description>
Polls @file for changes.


</description>
<parameters>
<parameter name="file">
<parameter_description> a #GFile.
</parameter_description>
</parameter>
</parameters>
<return> a new #GFileMonitor for the given #GFile. 
</return>
</function>

<function name="g_mount_get_uuid">
<description>
Gets the UUID for the @mount. The reference is typically based on
the file system UUID for the mount in question and should be
considered an opaque string. Returns %NULL if there is no UUID
available.


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
</parameters>
<return> the UUID for @mount or %NULL if no UUID can be computed.
</return>
</function>

<function name="g_file_output_stream_query_info_finish">
<description>
Finalizes the asynchronous query started 
by g_file_output_stream_query_info_async().


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFileOutputStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> A #GFileInfo for the finished query.
</return>
</function>

<function name="g_file_resolve_relative_path">
<description>
Resolves a relative path for @file to an absolute path.

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="relative_path">
<parameter_description> a given relative path string.
</parameter_description>
</parameter>
</parameters>
<return> #GFile to the resolved path. %NULL if @relative_path 
is %NULL or if @file is invalid.
</return>
</function>

<function name="g_buffered_input_stream_fill">
<description>
Tries to read @count bytes from the stream into the buffer. 
Will block during this read.

If @count is zero, returns zero and does nothing. A value of @count
larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.

On success, the number of bytes read into the buffer is returned.
It is not an error if this is not the same as the requested size, as it
can happen e.g. near the end of a file. Zero is returned on end of file
(or if @count is zero),  but never otherwise.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
operation was partially finished when the operation was cancelled the
partial result will be returned, without an error.

On error -1 is returned and @error is set accordingly.

For the asynchronous, non-blocking, version of this function, see 
g_buffered_input_stream_fill_async().


</description>
<parameters>
<parameter name="stream">
<parameter_description> #GBufferedInputStream.
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> the number of bytes that will be read from the stream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> the number of bytes read into @stream&apos;s buffer, up to @count, 
or -1 on error.
</return>
</function>

<function name="g_data_input_stream_read_int32">
<description>
Reads a signed 32-bit/4-byte value from @stream.

In order to get the correct byte order for this read operation, 
see g_data_stream_get_byte_order() and g_data_stream_set_byte_order().

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting.
</parameter_description>
</parameter>
</parameters>
<return> a signed 32-bit/4-byte value read from the @stream or %0 if 
an error occurred. 
</return>
</function>

<function name="g_file_info_set_display_name">
<description>
Sets the display name for the current #GFileInfo.
See %G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="display_name">
<parameter_description> a string containing a display name.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_append_to_finish">
<description>
Finishes an asynchronous file append operation started with 
g_file_append_to_async(). 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> #GAsyncResult
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a valid #GFileOutputStream or %NULL on error.
</return>
</function>

<function name="g_file_mount_enclosing_volume">
<description>
Starts a @mount_operation, mounting the volume that contains the file @location. 

When this operation has completed, @callback will be called with
@user_user data, and the operation can be finalized with 
g_file_mount_enclosing_volume_finish().

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

</description>
<parameters>
<parameter name="location">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the operation
</parameter_description>
</parameter>
<parameter name="mount_operation">
<parameter_description> a #GMountOperation or %NULL to avoid user interaction.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_seekable_can_seek">
<description>
Tests if the stream supports the #GSeekableIface.


</description>
<parameters>
<parameter name="seekable">
<parameter_description> a #GSeekable.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @seekable can be seeked. %FALSE otherwise.
</return>
</function>

<function name="g_file_info_set_attribute_object">
<description>
Sets the @attribute to contain the given @attr_value, 
if possible.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
<parameter name="attr_value">
<parameter_description> a #GObject.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_replace">
<description>
Returns: a #GFileOutputStream or %NULL on error. 

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="etag">
<parameter_description> an optional &amp;lt;link linkend=&quot;gfile-etag&quot;&amp;gt;entity tag&amp;lt;/link&amp;gt; for the 
current #GFile, or #NULL to ignore.
</parameter_description>
</parameter>
<parameter name="make_backup">
<parameter_description> %TRUE if a backup should be created.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileCreateFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFileOutputStream or %NULL on error. 
</return>
</function>

<function name="g_mount_operation_new">
<description>
Creates a new mount operation.


</description>
<parameters>
</parameters>
<return> a #GMountOperation.
</return>
</function>

<function name="g_file_attribute_matcher_new">
<description>
Creates a new file attribute matcher, which matches attributes 
against a given string. #GFileAttributeMatcher&amp;lt;!-- --&amp;gt;s are reference 
counted structures, and are created with a reference count of 1. If 
the number of references falls to 0, the #GFileAttributeMatcher is 
automatically destroyed.

The @attribute string should be formatted with specific keys separated
from namespaces with a double colon. Several &quot;namespace::key&quot; strings may be 
concatenated with a single comma (e.g. &quot;standard::type,standard::is-hidden&quot;). 
The wildcard &quot;*&quot; may be used to match all keys and namespaces, or 
&quot;namespace::*&quot; will match all keys in a given namespace. 

Examples of strings to use:
&amp;lt;table&amp;gt;
&amp;lt;title&amp;gt;File Attribute Matcher strings and results&amp;lt;/title&amp;gt;
&amp;lt;tgroup cols=&apos;2&apos; align=&apos;left&apos;&amp;gt;&amp;lt;thead&amp;gt;
&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt; Matcher String &amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt; Matches &amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;&amp;lt;/thead&amp;gt;
&amp;lt;tbody&amp;gt;
&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;&quot;*&quot;&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;matches all attributes.&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;
&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;&quot;standard::is-hidden&quot;&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;matches only the key is-hidden in the standard namespace.&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;
&amp;lt;row&amp;gt;&amp;lt;entry&amp;gt;&quot;standard::type,unix::*&quot;&amp;lt;/entry&amp;gt;&amp;lt;entry&amp;gt;matches the type key in the standard namespace and
all keys in the unix namespace.&amp;lt;/entry&amp;gt;&amp;lt;/row&amp;gt;
&amp;lt;/tbody&amp;gt;&amp;lt;/tgroup&amp;gt;
&amp;lt;/table&amp;gt;


</description>
<parameters>
<parameter name="attributes">
<parameter_description> an attribute string to match.
</parameter_description>
</parameter>
</parameters>
<return> a #GFileAttributeMatcher.
</return>
</function>

<function name="g_file_set_attribute_string">
<description>
Sets @attribute of type %G_FILE_ATTRIBUTE_TYPE_STRING to @value. 
If @attribute is of a different type, this operation will fail.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a string containing the attribute&apos;s name.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a string containing the attribute&apos;s value.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @attribute was successfully set, %FALSE otherwise.
</return>
</function>

<function name="g_io_modules_load_all_in_directory">
<description>
Loads all the modules in the specified directory.


</description>
<parameters>
<parameter name="dirname">
<parameter_description> pathname for a directory containing modules to load.
</parameter_description>
</parameter>
</parameters>
<return> a list of #GIOModules loaded from the directory,
All the modules are loaded into memory, if you want to
unload them (enabling on-demand loading) you must call
g_type_module_unuse() on all the modules. Free the list
with g_list_free().
</return>
</function>

<function name="g_io_extension_point_get_extensions">
<description>
Gets a list of all extensions that implement this extension point.
The list is sorted by priority, beginning with the highest priority.


</description>
<parameters>
<parameter name="extension_point">
<parameter_description> a #GIOExtensionPoint
</parameter_description>
</parameter>
</parameters>
<return> a #GList of #GIOExtension&amp;lt;!-- --&amp;gt;s. The list is owned by
GIO and should not be modified
</return>
</function>

<function name="g_volume_mount">
<description>
Mounts a volume.

</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the operation
</parameter_description>
</parameter>
<parameter name="mount_operation">
<parameter_description> a #GMountOperation or %NULL to avoid user interaction.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> a #gpointer.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_io_extension_point_implement">
<description>
Registers @type as extension for the extension point with name
@extension_point_name. 

If @type has already been registered as an extension for this 
extension point, the existing #GIOExtension object is returned.


</description>
<parameters>
<parameter name="extension_point_name">
<parameter_description> the name of the extension point
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the #GType to register as extension 
</parameter_description>
</parameter>
<parameter name="extension_name">
<parameter_description> the name for the extension
</parameter_description>
</parameter>
<parameter name="priority">
<parameter_description> the priority for the extension
</parameter_description>
</parameter>
</parameters>
<return> a #GIOExtension object for #GType
</return>
</function>

<function name="g_unix_mount_is_readonly">
<description>
Checks if a unix mount is mounted read only.


</description>
<parameters>
<parameter name="mount_entry">
<parameter_description> a #GUnixMount.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @mount_entry is read only.
</return>
</function>

<function name="g_volume_eject_finish">
<description>
Finishes ejecting a volume.


</description>
<parameters>
<parameter name="volume">
<parameter_description> pointer to a #GVolume.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, %FALSE if operation failed.
</return>
</function>

<function name="g_file_info_get_attribute_type">
<description>
Gets the attribute type for an attribute key.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> a #GFileAttributeType for the given @attribute, or 
%G_FILE_ATTRIBUTE_TYPE_INVALID if the key is invalid.
</return>
</function>

<function name="g_file_attribute_info_list_lookup">
<description>
Gets the file attribute with the name @name from @list.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GFileAttributeInfoList.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the attribute to lookup.
</parameter_description>
</parameter>
</parameters>
<return> a #GFileAttributeInfo for the @name, or %NULL if an 
attribute isn&apos;t found.
</return>
</function>

<function name="g_app_info_get_id">
<description>
Gets the ID of an application. An id is a string that
identifies the application. The exact format of the id is
platform dependent. For instance, on Unix this is the
desktop file id from the xdg menu specification.

Note that the returned ID may be %NULL, depending on how
the @appinfo has been constructed.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the application&apos;s ID.
</return>
</function>

<function name="GMountOperation">
<description>
The index of the user&apos;s choice when a question is asked during the 
mount operation. See the #GMountOperation::ask-question signal.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_file_create">
<description>
Creates a new file and returns an output stream for writing to it.
The file must not already exists.

By default files created are generally readable by everyone,
but if you pass #G_FILE_CREATE_PRIVATE in @flags the file
will be made readable only to the current user, to the level that
is supported on the target filesystem.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

If a file or directory with this name already exists the G_IO_ERROR_EXISTS
error will be returned.
Some file systems don&apos;t allow all file names, and may
return an G_IO_ERROR_INVALID_FILENAME error, and if the name
is to long G_IO_ERROR_FILENAME_TOO_LONG will be returned.
Other errors are possible too, and depend on what kind of
filesystem the file is on.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileCreateFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFileOutputStream for the newly created file, or 
%NULL on error.
</return>
</function>

<function name="g_memory_input_stream_add_data">
<description>
Appends @data to data that can be read from the input stream

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GMemoryInputStream
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> input data
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> length of the data, may be -1 if @data is a nul-terminated string
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> function that is called to free @data, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_content_type_get_description">
<description>
Gets the human readable description of the content type.


</description>
<parameters>
<parameter name="type">
<parameter_description> a content type string. 
</parameter_description>
</parameter>
</parameters>
<return> a short description of the content type @type. 
</return>
</function>

<function name="g_file_load_contents">
<description>
Loads the content of the file into memory, returning the size of
the data. The data is always zero terminated, but this is not
included in the resultant @length.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="contents">
<parameter_description> a location to place the contents of the file.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> a location to place the length of the contents of the file.
</parameter_description>
</parameter>
<parameter name="etag_out">
<parameter_description> a location to place the current entity tag for the file.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @file&apos;s contents were successfully loaded.
%FALSE if there were errors..
</return>
</function>

<function name="g_data_output_stream_put_int64">
<description>
Puts a signed 64-bit integer into the stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataOutputStream.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a #gint64.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @data was successfully added to the @stream.
</return>
</function>

<function name="g_output_stream_close">
<description>
Closes the stream, releasing resources related to it.

Once the stream is closed, all other operations will return %G_IO_ERROR_CLOSED.
Closing a stream multiple times will not return an error.

Closing a stream will automatically flush any outstanding buffers in the
stream.

Streams will be automatically closed when the last reference
is dropped, but you might want to call this function to make sure 
resources are released as early as possible.

Some streams might keep the backing store of the stream (e.g. a file descriptor)
open after the stream is closed. See the documentation for the individual
stream for details.

On failure the first error that happened will be reported, but the close
operation will finish as much as possible. A stream that failed to
close will still return %G_IO_ERROR_CLOSED for all operations. Still, it
is important to check and report the error to the user, otherwise
there might be a loss of data as all data might not be written.

If @cancellable is not NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
Cancelling a close will still leave the stream closed, but there some streams
can use a faster close that doesn&apos;t block to e.g. check errors. On
cancellation (as with any error) there is no guarantee that all written
data will reach the target. 


</description>
<parameters>
<parameter name="stream">
<parameter_description> A #GOutputStream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional cancellable object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on failure
</return>
</function>

<function name="g_file_replace_contents">
<description>
Replaces the contents of @file with @contents of @length bytes.
 
If @etag is specified (not %NULL) any existing file must have that etag, or
the error %G_IO_ERROR_WRONG_ETAG will be returned.

If @make_backup is %TRUE, this function will attempt to make a backup of @file.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

The returned @new_etag can be used to verify that the file hasn&apos;t changed the
next time it is saved over.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="contents">
<parameter_description> a string containing the new contents for @file.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of @contents in bytes.
</parameter_description>
</parameter>
<parameter name="etag">
<parameter_description> the old &amp;lt;link linkend=&quot;gfile-etag&quot;&amp;gt;entity tag&amp;lt;/link&amp;gt; 
for the document.
</parameter_description>
</parameter>
<parameter name="make_backup">
<parameter_description> %TRUE if a backup should be created.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileCreateFlags.
</parameter_description>
</parameter>
<parameter name="new_etag">
<parameter_description> a location to a new &amp;lt;link linkend=&quot;gfile-etag&quot;&amp;gt;entity tag&amp;lt;/link&amp;gt;
for the document. This should be freed with g_free() when no longer 
needed.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful. If an error
has occurred, this function will return %FALSE and set @error
appropriately if present.
</return>
</function>

<function name="g_volume_monitor_get_volume_for_uuid">
<description>
Finds a #GVolume object by it&apos;s UUID (see g_volume_get_uuid())


</description>
<parameters>
<parameter name="volume_monitor">
<parameter_description> a #GVolumeMonitor.
</parameter_description>
</parameter>
<parameter name="uuid">
<parameter_description> the UUID to look for
</parameter_description>
</parameter>
</parameters>
<return> a #GVolume or %NULL if no such volume is available.
</return>
</function>

<function name="g_app_info_launch_uris">
<description>
Launches the application. Passes @uris to the launched application 
as arguments, using the optional @launch_context to get information
about the details of the launcher (like what screen it is on).
On error, @error will be set accordingly.

To lauch the application without arguments pass a %NULL @uris list.

Note that even if the launch is successful the application launched
can fail to start if it runs into problems during startup. There is
no way to detect this.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
<parameter name="uris">
<parameter_description> a #GList containing URIs to launch. 
</parameter_description>
</parameter>
<parameter name="launch_context">
<parameter_description> a #GAppLaunchContext.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on successful launch, %FALSE otherwise. 
</return>
</function>

<function name="g_unix_mount_guess_icon">
<description>
Guesses the icon of a Unix mount. 


</description>
<parameters>
<parameter name="mount_entry">
<parameter_description> a #GUnixMountEntry
</parameter_description>
</parameter>
</parameters>
<return> a #GIcon
</return>
</function>

<function name="g_file_info_unset_attribute_mask">
<description>
Unsets a mask set by g_file_info_set_attribute_mask(), if one
is set.

</description>
<parameters>
<parameter name="info">
<parameter_description> #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="Cancels">
<description>

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_simple_async_result_get_op_res_gssize">
<description>
Gets a gssize from the asynchronous result.


</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
</parameters>
<return> a gssize returned from the asynchronous function.
</return>
</function>

<function name="g_file_info_set_name">
<description>
Sets the name attribute for the current #GFileInfo. 
See %G_FILE_ATTRIBUTE_STANDARD_NAME.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> a string containing a name.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_append_to_async">
<description>
Asynchronously opens @file for appending.

For more details, see g_file_append_to() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can then call
g_file_append_to_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileCreateFlags.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &amp;lt;link linkend=&quot;io-priority&quot;&amp;gt;I/O priority&amp;lt;/link&amp;gt; 
of the request. 
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_vfs_get_default">
<description>
Gets the default #GVfs for the system.


</description>
<parameters>
</parameters>
<return> a #GVfs. 
</return>
</function>

<function name="g_file_mount_mountable_finish">
<description>
Finishes a mount operation. See g_file_mount_mountable() for details.

Finish an asynchronous mount operation that was started 
with g_file_mount_mountable().


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFile or %NULL on error.
</return>
</function>

<function name="g_drive_poll_for_media_finish">
<description>
Finishes poll_for_mediaing a drive.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the drive has been poll_for_mediaed successfully,
%FALSE otherwise.
</return>
</function>

<function name="g_file_find_enclosing_mount_async">
<description>
Asynchronously gets the mount for the file.

For more details, see g_file_find_enclosing_mount() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can then call
g_file_find_enclosing_mount_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="file">
<parameter_description> a #GFile
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &amp;lt;link linkend=&quot;io-priority&quot;&amp;gt;I/O priority&amp;lt;/link&amp;gt; 
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_set_is_symlink">
<description>
Sets the &quot;is_symlink&quot; attribute in a #GFileInfo according to @is_symlink.
See %G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="is_symlink">
<parameter_description> a #gboolean.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_content_type_can_be_executable">
<description>
Checks if a content type can be executable. Note that for instance
things like text files can be executables (i.e. scripts and batch files).


</description>
<parameters>
<parameter name="type">
<parameter_description> a content type string.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the file type corresponds to a type that
can be executable, %FALSE otherwise. 
</return>
</function>

<function name="g_data_input_stream_read_line">
<description>
Reads a line from the data input stream.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> a #gsize to get the length of the data read in.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting.
</parameter_description>
</parameter>
</parameters>
<return> a string with the line that was read in (including the newlines).
Set @length to a #gsize to get the length of the read line. Returns %NULL on an error.
</return>
</function>

<function name="g_file_info_get_attribute_as_string">
<description>
Gets the value of a attribute, formated as a string.
This escapes things as needed to make the string valid
utf8.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> a UTF-8 string associated with the given @attribute.
When you&apos;re done with the string it must be freed with g_free().
</return>
</function>

<function name="g_unix_volume_disconnected">
<description>

</description>
<parameters>
<parameter name="volume">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_set_attribute_mask">
<description>
Sets @mask on @info to match specific attribute types.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> a #GFileAttributeMatcher.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mount_unmount">
<description>
Unmounts a mount. This is an asynchronous operation, and is 
finished by calling g_mount_unmount_finish() with the @mount 
and #GAsyncResults data returned in the @callback.

</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the operation
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_query_default_handler">
<description>
Returns: a #GAppInfo if the handle was found, %NULL if there were errors.

</description>
<parameters>
<parameter name="file">
<parameter_description> a #GFile to open.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GAppInfo if the handle was found, %NULL if there were errors.
When you are done with it, release it with g_object_unref()
</return>
</function>

<function name="g_app_info_supports_files">
<description>
Checks if the application accepts files as arguments.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @appinfo supports files.
</return>
</function>

<function name="g_unix_mount_point_is_user_mountable">
<description>
Checks if a unix mount point is mountable by the user.


</description>
<parameters>
<parameter name="mount_point">
<parameter_description> a #GUnixMountPoint.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the mount point is user mountable.
</return>
</function>

<function name="g_app_info_supports_uris">
<description>
Checks if the application supports reading files and directories from URIs.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @appinfo supports URIs.
</return>
</function>

<function name="g_file_info_set_icon">
<description>
Sets the icon for a given #GFileInfo. 
See %G_FILE_ATTRIBUTE_STANDARD_ICON.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="icon">
<parameter_description> a #GIcon.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_io_extension_get_priority">
<description>
Gets the priority with which @extension was registered.


</description>
<parameters>
<parameter name="extension">
<parameter_description> a #GIOExtension
</parameter_description>
</parameter>
</parameters>
<return> the priority of @extension
</return>
</function>

<function name="g_file_input_stream_query_info_async">
<description>
Queries the stream information asynchronously.
When the operation is finished @callback will be called. 
You can then call g_file_input_stream_query_info_finish() 
to get the result of the operation.

For the synchronous version of this function, 
see g_file_input_stream_query_info(). 

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be set


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFileInputStream.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description> a file attribute query string.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &amp;lt;link linkend=&quot;io-priority&quot;&amp;gt;I/O priority&amp;lt;/link&amp;gt; 
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_data_input_stream_read_until">
<description>
Reads a string from the data input stream, up to the first 
occurrance of any of the stop characters.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="stop_chars">
<parameter_description> characters to terminate the read.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> a #gsize to get the length of the data read in.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting.
</parameter_description>
</parameter>
</parameters>
<return> a string with the data that was read before encountering 
any of the stop characters. Set @length to a #gsize to get the length 
of the string. This function will return %NULL on an error.
</return>
</function>

<function name="g_app_launch_context_launch_failed">
<description>
Called when an application has failed to launch, so that it can cancel
the application startup notification started in g_app_launch_context_get_startup_notify_id().


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GAppLaunchContext.
</parameter_description>
</parameter>
<parameter name="startup_notify_id">
<parameter_description> the startup notification id that was returned by g_app_launch_context_get_startup_notify_id().
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_unix_mount_guess_can_eject">
<description>
Guesses whether a Unix mount can be ejected.


</description>
<parameters>
<parameter name="mount_entry">
<parameter_description> a #GUnixMountEntry
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @mount_entry is deemed to be ejectable.
</return>
</function>

<function name="g_app_launch_context_new">
<description>
Creates a new application launch context. This is not normally used,
instead you instantiate a subclass of this, such as #GdkAppLaunchContext.


</description>
<parameters>
</parameters>
<return> a #GAppLaunchContext.
</return>
</function>

<function name="g_simple_async_result_set_op_res_gpointer">
<description>
Sets the operation result within the asynchronous result to a pointer.

</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
<parameter name="op_res">
<parameter_description> a pointer result from an asynchronous function.
</parameter_description>
</parameter>
<parameter name="destroy_op_res">
<parameter_description> a #GDestroyNotify function.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_buffered_input_stream_set_buffer_size">
<description>
Sets the size of the internal buffer of @stream to @size, or to the 
size of the contents of the buffer. The buffer can never be resized 
smaller than its current contents.

</description>
<parameters>
<parameter name="stream">
<parameter_description> #GBufferedInputStream.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> a #gsize.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_has_uri_scheme">
<description>
Checks to see if a #GFile has a given URI scheme.

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="uri_scheme">
<parameter_description> a string containing a URI scheme.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if #GFile&apos;s backend supports the
given URI scheme, %FALSE if URI scheme is %NULL,
not supported, or #GFile is invalid.
</return>
</function>

<function name="g_unix_mount_get_device_path">
<description>
Gets the device path for a unix mount.


</description>
<parameters>
<parameter name="mount_entry">
<parameter_description> a #GUnixMount.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the device path.
</return>
</function>

<function name="g_file_info_set_is_hidden">
<description>
Sets the &quot;is_hidden&quot; attribute in a #GFileInfo according to @is_symlink.
See %G_FILE_ATTRIBUTE_STANDARD_IS_HIDDEN.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="is_hidden">
<parameter_description> a #gboolean.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_input_stream_read">
<description>
Tries to read @count bytes from the stream into the buffer starting at
@buffer. Will block during this read.

If count is zero returns zero and does nothing. A value of @count
larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.

On success, the number of bytes read into the buffer is returned.
It is not an error if this is not the same as the requested size, as it
can happen e.g. near the end of a file. Zero is returned on end of file
(or if @count is zero),  but never otherwise.

If @cancellable is not NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error G_IO_ERROR_CANCELLED will be returned. If an
operation was partially finished when the operation was cancelled the
partial result will be returned, without an error.

On error -1 is returned and @error is set accordingly.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GInputStream.
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a buffer to read data into (which should be at least count bytes long).
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> the number of bytes that will be read from the stream
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> Number of bytes read, or -1 on error
</return>
</function>

<function name="g_themed_icon_new_from_names">
<description>
Creates a new themed icon for @iconnames.


</description>
<parameters>
<parameter name="iconnames">
<parameter_description> an array of strings containing icon names.
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the number of elements in the @iconnames array.
</parameter_description>
</parameter>
</parameters>
<return> a new #GThemedIcon.
</return>
</function>

<function name="g_buffered_input_stream_new_sized">
<description>
Creates a new #GBufferedInputStream from the given @base_stream, 
with a buffer set to @size.


</description>
<parameters>
<parameter name="base_stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> a #gsize.
</parameter_description>
</parameter>
</parameters>
<return> a #GInputStream.
</return>
</function>

<function name="g_io_error_from_errno">
<description>
Converts errno.h error codes into GIO error codes.


</description>
<parameters>
<parameter name="err_no">
<parameter_description> Error number as defined in errno.h.
</parameter_description>
</parameter>
</parameters>
<return> #GIOErrorEnum value for the given errno.h error number.
</return>
</function>

<function name="g_mount_can_eject">
<description>
Checks if @mount can be eject.


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @mount can be ejected.
</return>
</function>

<function name="g_file_enumerate_children">
<description>
Gets the requested information about the files in a directory. The result
is a #GFileEnumerator object that will give out #GFileInfo objects for
all the files in the directory.

The @attribute value is a string that specifies the file attributes that
should be gathered. It is not an error if it&apos;s not possible to read a particular
requested attribute from a file - it just won&apos;t be set. @attribute should
be a comma-separated list of attribute or attribute wildcards. The wildcard &quot;*&quot;
means all attributes, and a wildcard like &quot;standard::*&quot; means all attributes in the standard
namespace. An example attribute query be &quot;standard::*,owner::user&quot;.
The standard attributes are available as defines, like #G_FILE_ATTRIBUTE_STANDARD_NAME.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

If the file does not exist, the G_IO_ERROR_NOT_FOUND error will be returned.
If the file is not a directory, the G_FILE_ERROR_NOTDIR error will be returned.
Other errors are possible too.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description> an attribute query string.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting.
</parameter_description>
</parameter>
</parameters>
<return> A #GFileEnumerator if successful, %NULL on error. 
</return>
</function>

<function name="g_output_stream_clear_pending">
<description>
Clears the pending flag on @stream.

</description>
<parameters>
<parameter name="stream">
<parameter_description> output stream
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_get_name">
<description>
Gets the name for a file.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the file name.
</return>
</function>

<function name="g_mount_operation_get_anonymous">
<description>
Check to see whether the mount operation is being used 
for an anonymous user.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if mount operation is anonymous. 
</return>
</function>

<function name="g_simple_async_result_get_op_res_gpointer">
<description>
Gets a pointer result as returned by the asynchronous function.


</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
</parameters>
<return> a pointer from the result.
</return>
</function>

<function name="g_io_scheduler_job_send_to_mainloop">
<description>
Used from an I/O job to send a callback to be run in the 
main loop (main thread), waiting for the result (and thus 
blocking the I/O job).


</description>
<parameters>
<parameter name="job">
<parameter_description> a #GIOSchedulerJob
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a #GSourceFunc callback that will be called in the main thread
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to pass to @func
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> a #GDestroyNotify for @user_data, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> The return value of @func
</return>
</function>

<function name="g_unix_mount_get_fs_type">
<description>
Gets the filesystem type for the unix mount.


</description>
<parameters>
<parameter name="mount_entry">
<parameter_description> a #GUnixMount.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the file system type.
</return>
</function>

<function name="g_data_input_stream_read_uint32">
<description>
Reads an unsigned 32-bit/4-byte value from @stream.

In order to get the correct byte order for this read operation, 
see g_data_stream_get_byte_order() and g_data_stream_set_byte_order().

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting.
</parameter_description>
</parameter>
</parameters>
<return> an unsigned 32-bit/4-byte value read from the @stream or %0 if 
an error occurred. 
</return>
</function>

<function name="g_volume_get_uuid">
<description>
Gets the UUID for the @volume. The reference is typically based on
the file system UUID for the volume in question and should be
considered an opaque string. Returns %NULL if there is no UUID
available.


</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume.
</parameter_description>
</parameter>
</parameters>
<return> the UUID for @volume or %NULL if no UUID can be computed.
</return>
</function>

<function name="g_simple_async_result_new">
<description>
Creates a #GSimpleAsyncResult.


</description>
<parameters>
<parameter name="source_object">
<parameter_description> a #GObject the asynchronous function was called with.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback.
</parameter_description>
</parameter>
<parameter name="source_tag">
<parameter_description> the asynchronous function.
</parameter_description>
</parameter>
</parameters>
<return> a #GSimpleAsyncResult.
</return>
</function>

<function name="g_content_type_get_mime_type">
<description>
Gets the mime-type for the content type. If one is registered


</description>
<parameters>
<parameter name="type">
<parameter_description> a content type string. 
</parameter_description>
</parameter>
</parameters>
<return> the registered mime-type for the given @type, or NULL if unknown.
</return>
</function>

<function name="g_file_monitor_emit_event">
<description>
Emits the #GFileMonitor::changed signal if a change
has taken place. Should be called from file monitor 
implementations only.

The signal will be emitted from an idle handler.

</description>
<parameters>
<parameter name="monitor">
<parameter_description> a #GFileMonitor.
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a #GFile.
</parameter_description>
</parameter>
<parameter name="other_file">
<parameter_description> a #GFile.
</parameter_description>
</parameter>
<parameter name="event_type">
<parameter_description> a set of #GFileMonitorEvent flags.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_copy_finish">
<description>
Finishes copying the file started with 
g_file_copy_async().


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a %TRUE on success, %FALSE on error.
</return>
</function>

<function name="g_mount_get_name">
<description>
Gets the name of @mount.


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
</parameters>
<return> the name for the given @mount. The returned string should 
be freed when no longer needed.
</return>
</function>

<function name="g_file_info_set_attribute_boolean">
<description>
Sets the @attribute to contain the given @attr_value, 
if possible.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
<parameter name="attr_value">
<parameter_description> a boolean value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_get_uri_scheme">
<description>
Gets the URI scheme for a #GFile.
RFC 3986 decodes the scheme as:
&amp;lt;programlisting&amp;gt;
URI = scheme &quot;:&quot; hier-part [ &quot;?&quot; query ] [ &quot;#&quot; fragment ] 
&amp;lt;/programlisting&amp;gt;
Common schemes include &quot;file&quot;, &quot;http&quot;, &quot;ftp&quot;, etc. 

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the URI scheme for the given 
#GFile. The returned string should be freed with g_free() 
when no longer needed.
</return>
</function>

<function name="g_app_info_should_show">
<description>
Checks if the application info should be shown in menus that 
list available applications.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @appinfo should be shown, %FALSE otherwise.
</return>
</function>

<function name="g_file_attribute_matcher_matches">
<description>
Checks if an attribute will be matched by an attribute matcher. If 
the matcher was created with the &quot;*&quot; matching string, this function
will always return %TRUE.


</description>
<parameters>
<parameter name="matcher">
<parameter_description> a #GFileAttributeMatcher.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @attribute matches @matcher. %FALSE otherwise.
</return>
</function>

<function name="g_app_info_get_all">
<description>
Gets a list of all of the applications currently registered 
on this system.

For desktop files, this includes applications that have 
&amp;lt;literal&amp;gt;NoDisplay=true&amp;lt;/literal&amp;gt; set or are excluded from 
display by means of &amp;lt;literal&amp;gt;OnlyShowIn&amp;lt;/literal&amp;gt; or
&amp;lt;literal&amp;gt;NotShowIn&amp;lt;/literal&amp;gt;. See g_app_info_should_show().
The returned list does not include applications which have
the &amp;lt;literal&amp;gt;Hidden&amp;lt;/literal&amp;gt; key set. 


</description>
<parameters>
</parameters>
<return> a newly allocated #GList of references to #GAppInfo&amp;lt;!----&amp;gt;s.
</return>
</function>

<function name="g_file_info_get_attribute_uint32">
<description>
Gets an unsigned 32-bit integer contained within the attribute. If the 
attribute does not contain an unsigned 32-bit integer, or is invalid, 
0 will be returned.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> an unsigned 32-bit integer from the attribute. 
</return>
</function>

<function name="g_file_get_basename">
<description>
Gets the base name (the last component of the path) for a given #GFile.

If called for the top level of a system (such as the filesystem root
or a uri like sftp://host/) it will return a single directory separator
(and on Windows, possibly a drive letter).

The base name is a byte string (*not* UTF-8). It has no defined encoding
or rules other than it may not contain zero bytes.  If you want to use
filenames in a user interface you should use the display name that you
can get by requesting the %G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME
attribute with g_file_query_info().

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
</parameters>
<return> string containing the #GFile&apos;s base name, or %NULL 
if given #GFile is invalid. The returned string should be 
freed with g_free() when no longer needed.
</return>
</function>

<function name="g_volume_get_drive">
<description>
Gets the drive for the @volume.


</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume.
</parameter_description>
</parameter>
</parameters>
<return> a #GDrive or %NULL if @volume is not associated with a drive.
</return>
</function>

<function name="g_desktop_app_info_lookup_get_default_for_uri_scheme">
<description>
Gets the default application for launching applications 
using this URI scheme for a particular GDesktopAppInfoLookup
implementation.

The GDesktopAppInfoLookup interface and this function is used
to implement g_app_info_get_default_for_uri_scheme() backends
in a GIO module. There is no reason for applications to use it
directly. Applications should use g_app_info_get_default_for_uri_scheme().


</description>
<parameters>
<parameter name="lookup">
<parameter_description> a #GDesktopAppInfoLookup
</parameter_description>
</parameter>
<parameter name="uri_scheme">
<parameter_description> a string containing a URI scheme.
</parameter_description>
</parameter>
</parameters>
<return> #GAppInfo for given @uri_scheme or %NULL on error.
</return>
</function>

<function name="g_file_info_set_attribute_int32">
<description>
Sets the @attribute to contain the given @attr_value, 
if possible.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
<parameter name="attr_value">
<parameter_description> a signed 32-bit integer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_buffered_output_stream_get_auto_grow">
<description>
Checks if the buffer automatically grows as data is added.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GBufferedOutputStream.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @stream&apos;s buffer automatically grows,
%FALSE otherwise.
</return>
</function>

<function name="g_cancellable_cancel">
<description>
Will set @cancellable to cancelled, and will emit the CANCELLED
signal.

This function is thread-safe. In other words, you can safely call it from
another thread than the one running an operation that was passed
the @cancellable.

</description>
<parameters>
<parameter name="cancellable">
<parameter_description> a #GCancellable object.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_attribute_matcher_enumerate_next">
<description>
Gets the next matched attribute from a #GFileAttributeMatcher.


</description>
<parameters>
<parameter name="matcher">
<parameter_description> a #GFileAttributeMatcher.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the next attribute or %NULL if 
no more attribute exist.
</return>
</function>

<function name="g_input_stream_close">
<description>
Closes the stream, releasing resources related to it.

Once the stream is closed, all other operations will return %G_IO_ERROR_CLOSED.
Closing a stream multiple times will not return an error.

Streams will be automatically closed when the last reference
is dropped, but you might want to call this function to make sure 
resources are released as early as possible.

Some streams might keep the backing store of the stream (e.g. a file descriptor)
open after the stream is closed. See the documentation for the individual
stream for details.

On failure the first error that happened will be reported, but the close
operation will finish as much as possible. A stream that failed to
close will still return %G_IO_ERROR_CLOSED for all operations. Still, it
is important to check and report the error to the user.

If @cancellable is not NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
Cancelling a close will still leave the stream closed, but some streams
can use a faster close that doesn&apos;t block to e.g. check errors. 


</description>
<parameters>
<parameter name="stream">
<parameter_description> A #GInputStream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on failure
</return>
</function>

<function name="g_file_mount_mountable">
<description>
Mounts a file of type G_FILE_TYPE_MOUNTABLE.
Using @mount_operation, you can request callbacks when, for instance, 
passwords are needed during authentication.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.

When the operation is finished, @callback will be called. You can then call
g_file_mount_mountable_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the operation
</parameter_description>
</parameter>
<parameter name="mount_operation">
<parameter_description> a #GMountOperation, or %NULL to avoid user interaction.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_buffered_input_stream_fill_async">
<description>
Reads data into @stream&apos;s buffer asynchronously, up to @count size.
@io_priority can be used to prioritize reads. For the synchronous
version of this function, see g_buffered_input_stream_fill().

</description>
<parameters>
<parameter name="stream">
<parameter_description> #GBufferedInputStream.
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> a #gssize.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &amp;lt;link linkend=&quot;io-priority&quot;&amp;gt;I/O priority&amp;lt;/link&amp;gt; 
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> a #gpointer.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_enumerator_close">
<description>
Releases all resources used by this enumerator, making the
enumerator return %G_IO_ERROR_CLOSED on all calls.

This will be automatically called when the last reference
is dropped, but you might want to call this function to make 
sure resources are released as early as possible.


</description>
<parameters>
<parameter name="enumerator">
<parameter_description> a #GFileEnumerator.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> #TRUE on success or #FALSE on error.
</return>
</function>

<function name="g_icon_equal">
<description>
Checks if two icons are equal.


</description>
<parameters>
<parameter name="icon1">
<parameter_description> pointer to the first #GIcon.
</parameter_description>
</parameter>
<parameter name="icon2">
<parameter_description> pointer to the second #GIcon.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @icon1 is equal to @icon2. %FALSE otherwise.
</return>
</function>

<function name="g_volume_should_automount">
<description>
Returns: %TRUE if the volume should be automatically mounted.

</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the volume should be automatically mounted.
</return>
</function>

<function name="g_memory_output_stream_get_data">
<description>
Gets any loaded data from the @ostream. 

Note that the returned pointer may become invalid on the next 
write or truncate operation on the stream. 


</description>
<parameters>
<parameter name="ostream">
<parameter_description> a #GMemoryOutputStream
</parameter_description>
</parameter>
</parameters>
<return> pointer to the stream&apos;s data
</return>
</function>

<function name="g_unix_mount_get_mount_path">
<description>
Gets the mount path for a unix mount.


</description>
<parameters>
<parameter name="mount_entry">
<parameter_description> input #GUnixMountEntry to get the mount path for.
</parameter_description>
</parameter>
</parameters>
<return> the mount path for @mount_entry.
</return>
</function>

<function name="g_output_stream_splice">
<description>
Splices an input stream into an output stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="source">
<parameter_description> a #GInputStream.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GOutputStreamSpliceFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #gssize containing the size of the data spliced.
</return>
</function>

<function name="g_file_info_set_attribute_uint64">
<description>
Sets the @attribute to contain the given @attr_value, 
if possible.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
<parameter name="attr_value">
<parameter_description> an unsigned 64-bit integer.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_volume_enumerate_identifiers">
<description>
Gets the kinds of &amp;lt;link linkend=&quot;volume-identifier&quot;&amp;gt;identifiers&amp;lt;/link&amp;gt;
that @volume has. Use g_volume_get_identifer() to obtain 
the identifiers themselves.


</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume
</parameter_description>
</parameter>
</parameters>
<return> a %NULL-terminated array of strings containing
kinds of identifiers. Use g_strfreev() to free.
</return>
</function>

<function name="g_unix_mount_points_get">
<description>
Gets a #GList of strings containing the unix mount points. 
If @time_read is set, it will be filled with the mount timestamp,
allowing for checking if the mounts have changed with 
g_unix_mounts_points_changed_since().


</description>
<parameters>
<parameter name="time_read">
<parameter_description> guint64 to contain a timestamp.
</parameter_description>
</parameter>
</parameters>
<return> a #GList of the UNIX mountpoints. 
</return>
</function>

<function name="g_file_attribute_info_list_unref">
<description>
Removes a reference from the given @list. If the reference count
falls to zero, the @list is deleted.

</description>
<parameters>
<parameter name="list">
<parameter_description> The #GFileAttributeInfoList to unreference.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_input_stream_skip_async">
<description>
Request an asynchronous skip of @count bytes from the stream into the buffer
starting at @buffer. When the operation is finished @callback will be called. 
You can then call g_input_stream_skip_finish() to get the result of the 
operation.

During an async request no other sync and async calls are allowed, and will
result in %G_IO_ERROR_PENDING errors. 

A value of @count larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.

On success, the number of bytes skipped will be passed to the
callback. It is not an error if this is not the same as the requested size, as it
can happen e.g. near the end of a file, but generally we try to skip
as many bytes as requested. Zero is returned on end of file
(or if @count is zero), but never otherwise.

Any outstanding i/o request with higher priority (lower numerical value) will
be executed before an outstanding request with lower priority. Default
priority is %G_PRIORITY_DEFAULT.

The asyncronous methods have a default fallback that uses threads to implement
asynchronicity, so they are optional for inheriting classes. However, if you
override one you must override all.

</description>
<parameters>
<parameter name="stream">
<parameter_description> A #GInputStream.
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> the number of bytes that will be skipped from the stream
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &amp;lt;link linkend=&quot;io-priority&quot;&amp;gt;I/O priority&amp;lt;/link&amp;gt; 
of the request. 
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_new_for_path">
<description>
Constructs a #GFile for a given path. This operation never
fails, but the returned object might not support any I/O
operation if @path is malformed.


</description>
<parameters>
<parameter name="path">
<parameter_description> a string containing a relative or absolute path.
</parameter_description>
</parameter>
</parameters>
<return> a new #GFile for the given @path. 
</return>
</function>

<function name="g_file_copy_attributes">
<description>
Copies the file attributes from @source to @destination. 

Normally only a subset of the file attributes are copied,
those that are copies in a normal file copy operation
(which for instance does not include e.g. mtime). However
if #G_FILE_COPY_ALL_METADATA is specified in @flags, then
all the metadata that is possible to copy is copied.


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GFile with attributes.
</parameter_description>
</parameter>
<parameter name="destination">
<parameter_description> a #GFile to copy attributes to.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileCopyFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the attributes were copied successfully, %FALSE otherwise.
</return>
</function>

<function name="g_file_query_exists">
<description>
Utility function to check if a particular file exists. This is
implemented using g_file_query_info() and as such does blocking I/O.

Note that in many cases it is racy to first check for file existance
and then execute something based on the outcome of that, because the
file might have been created or removed inbetween the operations. The
general approach to handling that is to not check, but just do the
operation and handle the errors as they come.

As an example of race-free checking, take the case of reading a file, and
if it doesn&apos;t exist, creating it. There are two racy versions: read it, and
on error create it; and: check if it exists, if not create it. These
can both result in two processes creating the file (with perhaps a partially
written file as the result). The correct approach is to always try to create
the file with g_file_create() which will either atomically create the file
or fail with a G_IO_ERROR_EXISTS error.

However, in many cases an existance check is useful in a user
interface, for instance to make a menu item sensitive/insensitive, so that
you don&apos;t have to fool users that something is possible and then just show
and error dialog. If you do this, you should make sure to also handle the
errors that can happen due to races when you execute the operation.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the file exists (and can be detected without error), %FALSE otherwise (or if cancelled).
</return>
</function>

<function name="g_io_extension_ref_class">
<description>
Gets a reference to the class for the type that is 
associated with @extension.


</description>
<parameters>
<parameter name="extension">
<parameter_description> a #GIOExtension
</parameter_description>
</parameter>
</parameters>
<return> the #GTypeClass for the type of @extension
</return>
</function>

<function name="g_app_info_get_default_for_type">
<description>
Gets the #GAppInfo that correspond to a given content type.


</description>
<parameters>
<parameter name="content_type">
<parameter_description> the content type to find a #GAppInfo for
</parameter_description>
</parameter>
<parameter name="must_support_uris">
<parameter_description> if %TRUE, the #GAppInfo is expected to
support URIs
</parameter_description>
</parameter>
</parameters>
<return> #GAppInfo for given @content_type or %NULL on error.
</return>
</function>

<function name="g_file_query_filesystem_info">
<description>
Similar to g_file_query_info(), but obtains information
about the filesystem the @file is on, rather than the file itself.
For instance the amount of space available and the type of
the filesystem.

The @attribute value is a string that specifies the file attributes that
should be gathered. It is not an error if it&apos;s not possible to read a particular
requested attribute from a file - it just won&apos;t be set. @attribute should
be a comma-separated list of attribute or attribute wildcards. The wildcard &quot;*&quot;
means all attributes, and a wildcard like &quot;fs:*&quot; means all attributes in the fs
namespace. The standard namespace for filesystem attributes is &quot;fs&quot;.
Common attributes of interest are #G_FILE_ATTRIBUTE_FILESYSTEM_SIZE
(the total size of the filesystem in bytes), #G_FILE_ATTRIBUTE_FILESYSTEM_FREE (number of
bytes available), and #G_FILE_ATTRIBUTE_FILESYSTEM_TYPE (type of the filesystem).

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

If the file does not exist, the G_IO_ERROR_NOT_FOUND error will be returned.
Other errors are possible too, and depend on what kind of filesystem the file is on.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description>  an attribute query string.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError. 
</parameter_description>
</parameter>
</parameters>
<return> a #GFileInfo or %NULL if there was an error.
</return>
</function>

<function name="g_mount_remount">
<description>
Remounts a mount. This is an asynchronous operation, and is 
finished by calling g_mount_remount_finish() with the @mount 
and #GAsyncResults data returned in the @callback.

Remounting is useful when some setting affecting the operation
of the volume has been changed, as these may need a remount to
take affect. While this is semantically equivalent with unmounting
and then remounting not all backends might need to actually be
unmounted.

</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the operation
</parameter_description>
</parameter>
<parameter name="mount_operation">
<parameter_description> a #GMountOperation or %NULL to avoid user interaction.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_read_finish">
<description>
Finishes an asynchronous file read operation started with 
g_file_read_async(). 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFileInputStream or %NULL on error.
</return>
</function>

<function name="g_file_info_get_symlink_target">
<description>
Gets the symlink target for a given #GFileInfo.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the symlink target.
</return>
</function>

<function name="g_simple_async_result_run_in_thread">
<description>
Runs the asynchronous job in a separated thread.

</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a #GSimpleAsyncThreadFunc.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the io priority of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_load_partial_contents_finish">
<description>
Finishes an asynchronous partial load operation that was started
with g_file_load_partial_contents_async().


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult. 
</parameter_description>
</parameter>
<parameter name="contents">
<parameter_description> a location to place the contents of the file.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> a location to place the length of the contents of the file.
</parameter_description>
</parameter>
<parameter name="etag_out">
<parameter_description> a location to place the current entity tag for the file.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the load was successful. If %FALSE and @error is 
present, it will be set appropriately. 
</return>
</function>

<function name="g_output_stream_write">
<description>
Tries to write @count bytes from @buffer into the stream. Will block
during the operation.

If count is zero returns zero and does nothing. A value of @count
larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.

On success, the number of bytes written to the stream is returned.
It is not an error if this is not the same as the requested size, as it
can happen e.g. on a partial i/o error, or if there is not enough
storage in the stream. All writes either block until at least one byte
is written, so zero is never returned (unless @count is zero).

If @cancellable is not NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error G_IO_ERROR_CANCELLED will be returned. If an
operation was partially finished when the operation was cancelled the
partial result will be returned, without an error.

On error -1 is returned and @error is set accordingly.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> the buffer containing the data to write. 
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> the number of bytes to write
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional cancellable object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> Number of bytes written, or -1 on error
</return>
</function>

<function name="g_output_stream_write_all">
<description>
Tries to write @count bytes from @buffer into the stream. Will block
during the operation.

This function is similar to g_output_stream_write(), except it tries to
write as many bytes as requested, only stopping on an error.

On a successful write of @count bytes, %TRUE is returned, and @bytes_written
is set to @count.

If there is an error during the operation FALSE is returned and @error
is set to indicate the error status, @bytes_written is updated to contain
the number of bytes written into the stream before the error occurred.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> the buffer containing the data to write. 
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> the number of bytes to write
</parameter_description>
</parameter>
<parameter name="bytes_written">
<parameter_description> location to store the number of bytes that was 
written to the stream
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE if there was an error
</return>
</function>

<function name="g_vfs_get_supported_uri_schemes">
<description>
Gets a list of URI schemes supported by @vfs.


</description>
<parameters>
<parameter name="vfs">
<parameter_description> a #GVfs.
</parameter_description>
</parameter>
</parameters>
<return> a list of strings.
</return>
</function>

<function name="g_file_monitor_file">
<description>
Obtains a file monitor for the given file. If no file notification
mechanism exists, then regular polling of the file is used.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileMonitorFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> a #GFileMonitor for the given @file.
</return>
</function>

<function name="g_file_output_stream_get_etag">
<description>
Gets the entity tag for the file when it has been written.
This must be called after the stream has been written
and closed, as the etag can change while writing.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFileOutputStream.
</parameter_description>
</parameter>
</parameters>
<return> the entity tag for the stream.
</return>
</function>

<function name="g_file_move">
<description>

Tries to move the file or directory @source to the location specified by @destination.
If native move operations are supported then this is used, otherwise a copy + delete
fallback is used. The native implementation may support moving directories (for instance
on moves inside the same filesystem), but the fallback code does not.

If the flag #G_FILE_COPY_OVERWRITE is specified an already
existing @destination file is overwritten.

If the flag #G_FILE_COPY_NOFOLLOW_SYMLINKS is specified then symlinks
will be copied as symlinks, otherwise the target of the
@source symlink will be copied.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

If @progress_callback is not %NULL, then the operation can be monitored by
setting this to a #GFileProgressCallback function. @progress_callback_data
will be passed to this function. It is guaranteed that this callback will
be called after all data has been transferred with the total number of bytes
copied during the operation.

If the @source file does not exist then the G_IO_ERROR_NOT_FOUND
error is returned, independent on the status of the @destination.

If #G_FILE_COPY_OVERWRITE is not specified and the target exists, then the
error G_IO_ERROR_EXISTS is returned.

If trying to overwrite a file over a directory the G_IO_ERROR_IS_DIRECTORY
error is returned. If trying to overwrite a directory with a directory the
G_IO_ERROR_WOULD_MERGE error is returned.

If the source is a directory and the target does not exist, or #G_FILE_COPY_OVERWRITE is
specified and the target is a file, then the G_IO_ERROR_WOULD_RECURSE error
may be returned (if the native move operation isn&apos;t available).


</description>
<parameters>
<parameter name="source">
<parameter_description> #GFile pointing to the source location.
</parameter_description>
</parameter>
<parameter name="destination">
<parameter_description> #GFile pointing to the destination location.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> set of #GFileCopyFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="progress_callback">
<parameter_description> #GFileProgressCallback function for updates.
</parameter_description>
</parameter>
<parameter name="progress_callback_data">
<parameter_description> gpointer to user data for the callback function.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for returning error conditions, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on successful move, %FALSE otherwise.
</return>
</function>

<function name="g_buffered_output_stream_new">
<description>
Creates a new buffered output stream for a base stream.


</description>
<parameters>
<parameter name="base_stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
</parameters>
<return> a #GOutputStream for the given @base_stream.
</return>
</function>

<function name="g_file_info_get_edit_name">
<description>
Gets the edit name for a file.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the edit name.
</return>
</function>

<function name="g_file_set_attribute">
<description>
Sets an attribute in the file with attribute name @attribute to @value.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a string containing the attribute&apos;s name.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> The type of the attribute
</parameter_description>
</parameter>
<parameter name="value_p">
<parameter_description> a pointer to the value (or the pointer itself if the type is a pointer type)
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the attribute was set, %FALSE otherwise.
</return>
</function>

<function name="g_file_enumerator_close_async">
<description>
Asynchronously closes the file enumerator. 

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned in 
g_file_enumerator_close_finish(). 

</description>
<parameters>
<parameter name="enumerator">
<parameter_description> a #GFileEnumerator.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &amp;lt;link linkend=&quot;io-priority&quot;&amp;gt;I/O priority&amp;lt;/link&amp;gt; 
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_unix_mount_point_is_readonly">
<description>
Checks if a unix mount point is read only.


</description>
<parameters>
<parameter name="mount_point">
<parameter_description> a #GUnixMountPoint.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a mount point is read only.
</return>
</function>

<function name="g_file_read">
<description>
Opens a file for reading. The result is a #GFileInputStream that
can be used to read the contents of the file.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

If the file does not exist, the G_IO_ERROR_NOT_FOUND error will be returned.
If the file is a directory, the G_IO_ERROR_IS_DIRECTORY error will be returned.
Other errors are possible too, and depend on what kind of filesystem the file is on.


</description>
<parameters>
<parameter name="file">
<parameter_description> #GFile to read.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> #GFileInputStream or %NULL on error.
</return>
</function>

<function name="g_app_info_dup">
<description>
Creates a duplicate of a #GAppInfo.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
</parameters>
<return> a duplicate of @appinfo.
</return>
</function>

<function name="g_simple_async_result_propagate_error">
<description>
Propagates an error from within the simple asynchronous result to
a given destination.


</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> a location to propegate the error to.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the error was propegated to @dest. %FALSE otherwise.
</return>
</function>

<function name="g_app_launch_context_get_display">
<description>
Gets the display string for the display. This is used to ensure new
applications are started on the same display as the launching 
application.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GAppLaunchContext.  
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> a #GAppInfo. 
</parameter_description>
</parameter>
<parameter name="files">
<parameter_description> a #GList of files.
</parameter_description>
</parameter>
</parameters>
<return> a display string for the display.
</return>
</function>

<function name="g_desktop_app_info_get_is_hidden">
<description>
A desktop file is hidden if the Hidden key in it is
set to True.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GDesktopAppInfo.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if hidden, %FALSE otherwise. 
</return>
</function>

<function name="_g_local_file_new">
<description>

</description>
<parameters>
<parameter name="filename">
<parameter_description> filename of the file to create.
</parameter_description>
</parameter>
</parameters>
<return> new local #GFile.
</return>
</function>

<function name="g_data_output_stream_put_string">
<description>
Puts a string into the output stream. 


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataOutputStream.
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> a string.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @string was successfully added to the @stream.
</return>
</function>

<function name="g_vfs_parse_name">
<description>
This operation never fails, but the returned object might 
not support any I/O operations if the @parse_name cannot 
be parsed by the #GVfs module.


</description>
<parameters>
<parameter name="vfs">
<parameter_description> a #GVfs.
</parameter_description>
</parameter>
<parameter name="parse_name">
<parameter_description> a string to be parsed by the VFS module.
</parameter_description>
</parameter>
</parameters>
<return> a #GFile for the given @parse_name.
</return>
</function>

<function name="g_vfs_is_active">
<description>
Checks if the VFS is active.


</description>
<parameters>
<parameter name="vfs">
<parameter_description> a #GVfs.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if construction of the @vfs was successful and it is now active.
</return>
</function>

<function name="g_io_extension_point_register">
<description>
Registers an extension point.


</description>
<parameters>
<parameter name="name">
<parameter_description> The name of the extension point
</parameter_description>
</parameter>
</parameters>
<return> the new #GIOExtensionPoint. This object is owned by GIO
and should not be freed
</return>
</function>

<function name="g_simple_async_result_new_from_error">
<description>
Creates a #GSimpleAsyncResult from an error condition.


</description>
<parameters>
<parameter name="source_object">
<parameter_description> a #GObject.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location.
</parameter_description>
</parameter>
</parameters>
<return> a #GSimpleAsyncResult.
</return>
</function>

<function name="g_input_stream_read_async">
<description>
Request an asynchronous read of @count bytes from the stream into the buffer
starting at @buffer. When the operation is finished @callback will be called. 
You can then call g_input_stream_read_finish() to get the result of the 
operation.

During an async request no other sync and async calls are allowed, and will
result in %G_IO_ERROR_PENDING errors. 

A value of @count larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.

On success, the number of bytes read into the buffer will be passed to the
callback. It is not an error if this is not the same as the requested size, as it
can happen e.g. near the end of a file, but generally we try to read
as many bytes as requested. Zero is returned on end of file
(or if @count is zero),  but never otherwise.

Any outstanding i/o request with higher priority (lower numerical value) will
be executed before an outstanding request with lower priority. Default
priority is %G_PRIORITY_DEFAULT.

The asyncronous methods have a default fallback that uses threads to implement
asynchronicity, so they are optional for inheriting classes. However, if you
override one you must override all.

</description>
<parameters>
<parameter name="stream">
<parameter_description> A #GInputStream.
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a buffer to read data into (which should be at least count bytes long).
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> the number of bytes that will be read from the stream
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &amp;lt;link linkend=&quot;io-priority&quot;&amp;gt;I/O priority&amp;lt;/link&amp;gt; 
of the request. 
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_get_sort_order">
<description>
Gets the value of the sort_order attribute from the #GFileInfo.
See %G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> a #gint32 containing the value of the &quot;standard::sort_order&quot; attribute.
</return>
</function>

<function name="g_themed_icon_new">
<description>
Creates a new themed icon for @iconname.


</description>
<parameters>
<parameter name="iconname">
<parameter_description> a string containing an icon name.
</parameter_description>
</parameter>
</parameters>
<return> a new #GThemedIcon.
</return>
</function>

<function name="g_file_load_contents_finish">
<description>
Finishes an asynchronous load of the @file&apos;s contents. 
The contents are placed in @contents, and @length is set to the 
size of the @contents string. If @etag_out is present, it will be 
set to the new entity tag for the @file.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult. 
</parameter_description>
</parameter>
<parameter name="contents">
<parameter_description> a location to place the contents of the file.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> a location to place the length of the contents of the file.
</parameter_description>
</parameter>
<parameter name="etag_out">
<parameter_description> a location to place the current entity tag for the file.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the load was successful. If %FALSE and @error is 
present, it will be set appropriately. 
</return>
</function>

<function name="g_input_stream_read_finish">
<description>
Finishes an asynchronous stream read operation. 


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GInputStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> number of bytes read in, or -1 on error.
</return>
</function>

<function name="g_file_replace_contents_finish">
<description>
Finishes an asynchronous replace of the given @file. See
g_file_replace_contents_async(). Sets @new_etag to the new entity 
tag for the document, if present.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult. 
</parameter_description>
</parameter>
<parameter name="new_etag">
<parameter_description> a location of a new &amp;lt;link linkend=&quot;gfile-etag&quot;&amp;gt;entity tag&amp;lt;/link&amp;gt; 
for the document. This should be freed with g_free() when it is no 
longer needed.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL 
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on failure.
</return>
</function>

<function name="g_seekable_tell">
<description>
Tells the current position within the stream.


</description>
<parameters>
<parameter name="seekable">
<parameter_description> a #GSeekable.
</parameter_description>
</parameter>
</parameters>
<return> the offset from the beginning of the buffer.
</return>
</function>

<function name="g_buffered_input_stream_get_available">
<description>
Gets the size of the available data within the stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> #GBufferedInputStream.
</parameter_description>
</parameter>
</parameters>
<return> size of the available stream. 
</return>
</function>

<function name="g_memory_output_stream_new">
<description>
Creates a new #GMemoryOutputStream. 

If @data is non-%NULL, the stream  will use that for its internal storage.
If @realloc_fn is non-%NULL, it will be used for resizing the internal
storage when necessary. To construct a fixed-size output stream, 
pass %NULL as @realloc_fn.
|[
/&amp;ast; a stream that can grow &amp;ast;/
stream = g_memory_output_stream_new (NULL, 0, realloc, free);

/&amp;ast; a fixed-size stream &amp;ast;/
data = malloc (200);
stream2 = g_memory_output_stream_new (data, 200, NULL, free);
]|


</description>
<parameters>
<parameter name="data">
<parameter_description> pointer to a chunk of memory to use, or %NULL
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the size of @data
</parameter_description>
</parameter>
<parameter name="realloc_fn">
<parameter_description> a function with realloc() semantics to be called when 
@data needs to be grown, or %NULL
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> a function to be called on @data when the stream is finalized,
or %NULL
</parameter_description>
</parameter>
</parameters>
<return> A newly created #GMemoryOutputStream object.
</return>
</function>

<function name="g_file_info_get_display_name">
<description>
Gets a display name for a file.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the display name.
</return>
</function>

<function name="_g_unix_volume_monitor_lookup_volume_for_mount_path">
<description>

</description>
<parameters>
<parameter name="monitor">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="mount_path">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return>  #GUnixVolume for the given @mount_path.
</return>
</function>

<function name="g_file_monitor_directory">
<description>
Obtains a directory monitor for the given file.
This may fail if directory monitoring is not supported.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileMonitorFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> a #GFileMonitor for the given @file, 
or %NULL on error.
</return>
</function>

<function name="g_file_dup">
<description>
Duplicates a #GFile handle. This operation does not duplicate 
the actual file or directory represented by the #GFile; see 
g_file_copy() if attempting to copy a file. 

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
</parameters>
<return> #GFile that is a duplicate of the given #GFile. 
</return>
</function>

<function name="g_buffered_output_stream_set_buffer_size">
<description>
Sets the size of the internal buffer to @size.

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GBufferedOutputStream.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> a #gsize.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_unix_mount_points_changed_since">
<description>
Checks if the unix mount points have changed since a given unix time.


</description>
<parameters>
<parameter name="time">
<parameter_description> guint64 to contain a timestamp.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the mount points have changed since @time. 
</return>
</function>

<function name="g_file_replace_contents_async">
<description>
Starts an asynchronous replacement of @file with the given 
@contents of @length bytes. @etag will replace the document&apos;s 
current entity tag.

When this operation has completed, @callback will be called with
@user_user data, and the operation can be finalized with 
g_file_replace_contents_finish().

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

If @make_backup is %TRUE, this function will attempt to 
make a backup of @file.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="contents">
<parameter_description> string of contents to replace the file with.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of @contents in bytes.
</parameter_description>
</parameter>
<parameter name="etag">
<parameter_description> a new &amp;lt;link linkend=&quot;gfile-etag&quot;&amp;gt;entity tag&amp;lt;/link&amp;gt; for the @file.
</parameter_description>
</parameter>
<parameter name="make_backup">
<parameter_description> %TRUE if a backup should be created.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileCreateFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mount_unmount_finish">
<description>
Finishes unmounting a mount. If any errors occurred during the operation, 
@error will be set to contain the errors and %FALSE will be returned.


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the mount was successfully unmounted. %FALSE otherwise.
</return>
</function>

<function name="g_buffered_output_stream_get_buffer_size">
<description>
Gets the size of the buffer in the @stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GBufferedOutputStream.
</parameter_description>
</parameter>
</parameters>
<return> the current size of the buffer.
</return>
</function>

<function name="g_icon_hash">
<description>
Gets a hash for an icon.


</description>
<parameters>
<parameter name="icon">
<parameter_description> #gconstpointer to an icon object.
</parameter_description>
</parameter>
</parameters>
<return> a #guint containing a hash for the @icon, suitable for 
use in a #GHashTable or similar data structure.
</return>
</function>

<function name="g_file_info_get_attribute_object">
<description>
Gets the value of a #GObject attribute. If the attribute does 
not contain a #GObject, %NULL will be returned.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> a #GObject associated with the given @attribute, or
%NULL otherwise.
</return>
</function>

<function name="g_file_attribute_matcher_ref">
<description>
References a file attribute matcher.


</description>
<parameters>
<parameter name="matcher">
<parameter_description> a #GFileAttributeMatcher.
</parameter_description>
</parameter>
</parameters>
<return> a #GFileAttributeMatcher.
</return>
</function>

<function name="GFilenameCompleter">
<description>
Emitted when the file name completion information comes available.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_file_replace_finish">
<description>
Finishes an asynchronous file replace operation started with 
g_file_replace_async(). 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFileOutputStream, or %NULL on error.
</return>
</function>

<function name="g_file_info_new">
<description>
Creates a new file info structure.


</description>
<parameters>
</parameters>
<return> a #GFileInfo.
</return>
</function>

<function name="g_unix_output_stream_new">
<description>
Creates a new unix output stream for @fd. If @close_fd_at_close
is %TRUE, the fd will be closed when the output stream is destroyed.


</description>
<parameters>
<parameter name="fd">
<parameter_description> unix&apos;s file descriptor.
</parameter_description>
</parameter>
<parameter name="close_fd_at_close">
<parameter_description> a #gboolean.
</parameter_description>
</parameter>
</parameters>
<return> #GOutputStream. If @close_fd_at_close is %TRUE, then
@fd will be closed when the #GOutputStream is closed.
</return>
</function>

<function name="g_data_output_stream_put_uint16">
<description>
Puts an unsigned 16-bit integer into the output stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataOutputStream.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a #guint16.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @data was successfully added to the @stream.
</return>
</function>

<function name="g_simple_async_result_new_error">
<description>
Creates a new #GSimpleAsyncResult with a set error.


</description>
<parameters>
<parameter name="source_object">
<parameter_description> a #GObject.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback. 
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback.
</parameter_description>
</parameter>
<parameter name="domain">
<parameter_description> a #GQuark.
</parameter_description>
</parameter>
<parameter name="code">
<parameter_description> an error code.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a string with format characters.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of values to insert into @format.
</parameter_description>
</parameter>
</parameters>
<return> a #GSimpleAsyncResult.
</return>
</function>

<function name="g_app_info_get_all_for_type">
<description>
Gets a list of all #GAppInfo s for a given content type.


</description>
<parameters>
<parameter name="content_type">
<parameter_description> the content type to find a #GAppInfo for
</parameter_description>
</parameter>
</parameters>
<return> #GList of #GAppInfo s for given @content_type
or %NULL on error.
</return>
</function>

<function name="g_file_set_display_name_async">
<description>
Asynchronously sets the display name for a given #GFile.

For more details, see g_set_display_name() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can then call
g_file_set_display_name_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="display_name">
<parameter_description> a string.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &amp;lt;link linkend=&quot;io-priority&quot;&amp;gt;I/O priority&amp;lt;/link&amp;gt; 
of the request. 
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_unmount_mountable_finish">
<description>
Finishes an unmount operation, see g_file_unmount_mountable() for details.

Finish an asynchronous unmount operation that was started 
with g_file_unmount_mountable().


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the operation finished successfully. %FALSE
otherwise.
</return>
</function>

<function name="g_file_info_get_attribute_uint64">
<description>
Gets a unsigned 64-bit integer contained within the attribute. If the 
attribute does not contain an unsigned 64-bit integer, or is invalid, 
0 will be returned.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> a unsigned 64-bit integer from the attribute. 
</return>
</function>

<function name="g_app_info_can_remove_supports_type">
<description>
Checks if a supported content type can be removed from an application.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if it is possible to remove supported 
content types from a given @appinfo, %FALSE if not.
</return>
</function>

<function name="g_file_info_get_modification_time">
<description>
Gets the modification time of the current @info and sets it
in @result.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GTimeVal.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_get_uri">
<description>
Gets the URI for the @file.

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the #GFile&apos;s URI.
The returned string should be freed with g_free() when no longer needed.
</return>
</function>

<function name="g_mount_operation_set_username">
<description>
Sets the user name within @op to @username.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
<parameter name="username">
<parameter_description> input username.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_content_type_is_a">
<description>
Determines if @type is a subset of @supertype.  


</description>
<parameters>
<parameter name="type">
<parameter_description> a content type string. 
</parameter_description>
</parameter>
<parameter name="supertype">
<parameter_description> a string.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @type is a kind of @supertype,
%FALSE otherwise. 
</return>
</function>

<function name="g_file_query_filesystem_info_async">
<description>
Asynchronously gets the requested information about the filesystem
that the specified @file is on. The result is a #GFileInfo object
that contains key-value attributes (such as type or size for the
file).

For more details, see g_file_query_filesystem_info() which is the
synchronous version of this call.

When the operation is finished, @callback will be called. You can
then call g_file_query_info_finish() to get the result of the
operation.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description> an attribute query string.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &amp;lt;link linkend=&quot;io-priority&quot;&amp;gt;I/O priority&amp;lt;/link&amp;gt; 
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

</root>
